// Generated by Bisonc++ V4.05.00 on Tue, 26 Apr 2016 06:55:58 +0530

// $insert class.ih
#include "Parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token__ is _UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token__ in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on _error_
// which is applied. In this _error_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
// Last element:    {set to d_token__,    action to perform}
//      }

// When the --thread-safe option is specified, all static data are defined as
// const. If --thread-safe is not provided, the state-tables are not defined
// as const, since the lookup() function below will modify them


namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum 
    {
        STACK_EXPANSION = 5     // size to expand the state-stack with when
                                // full
    };

    enum ReservedTokens
    {
        PARSE_ACCEPT     = 0,   // `ACCEPT' TRANSITION
        _UNDETERMINED_   = -2,
        _EOF_            = -1,
        _error_          = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            int d_type;
            int d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
            size_t d_errorState;    // used with Error states
        };
    };

    // $insert staticdata
    
// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {303, 1}, // 1: start ->  translation_unit
     {304, 1}, // 2: translation_unit ->  struct_specifier
     {304, 1}, // 3: translation_unit ->  function_definition
     {304, 2}, // 4: translation_unit ->  translation_unit function_definition
     {304, 2}, // 5: translation_unit ->  translation_unit struct_specifier
     {306, 2}, // 6: M_struct_specifier (STRUCT) ->  STRUCT IDENTIFIER
     {305, 5}, // 7: struct_specifier ('{') ->  M_struct_specifier '{' declaration_list '}' ';'
     {308, 1}, // 8: M_fun_type_specifier ->  type_specifier
     {309, 4}, // 9: function_definition ->  M_fun_type_specifier fun_declarator #0001 compound_statement
     {311, 0}, // 10: #0001 ->  <empty>
     {312, 1}, // 11: type_specifier (VOID) ->  VOID
     {312, 1}, // 12: type_specifier (INT) ->  INT
     {312, 1}, // 13: type_specifier (FLOAT) ->  FLOAT
     {312, 2}, // 14: type_specifier (STRUCT) ->  STRUCT IDENTIFIER
     {310, 4}, // 15: fun_declarator (IDENTIFIER) ->  IDENTIFIER '(' parameter_list ')'
     {310, 3}, // 16: fun_declarator (IDENTIFIER) ->  IDENTIFIER '(' ')'
     {310, 2}, // 17: fun_declarator ('*') ->  '*' fun_declarator
     {313, 1}, // 18: parameter_list ->  parameter_declaration
     {313, 3}, // 19: parameter_list (',') ->  parameter_list ',' parameter_declaration
     {315, 1}, // 20: M_parameter_type ->  type_specifier
     {314, 2}, // 21: parameter_declaration ->  M_parameter_type declarator
     {316, 1}, // 22: declarator (IDENTIFIER) ->  IDENTIFIER
     {316, 5}, // 23: declarator ('[') ->  declarator '[' #0002 primary_expression ']'
     {317, 0}, // 24: #0002 ->  <empty>
     {316, 2}, // 25: declarator ('*') ->  '*' declarator
     {318, 1}, // 26: primary_expression (IDENTIFIER) ->  IDENTIFIER
     {318, 1}, // 27: primary_expression (INT_CONSTANT) ->  INT_CONSTANT
     {318, 1}, // 28: primary_expression (FLOAT_CONSTANT) ->  FLOAT_CONSTANT
     {318, 1}, // 29: primary_expression (STRING_LITERAL) ->  STRING_LITERAL
     {318, 3}, // 30: primary_expression ('(') ->  '(' expression ')'
     {319, 2}, // 31: compound_statement ('{') ->  '{' '}'
     {319, 3}, // 32: compound_statement ('{') ->  '{' statement_list '}'
     {319, 4}, // 33: compound_statement ('{') ->  '{' declaration_list statement_list '}'
     {320, 1}, // 34: statement_list ->  statement
     {320, 2}, // 35: statement_list ->  statement_list statement
     {321, 3}, // 36: statement ('{') ->  '{' statement_list '}'
     {321, 1}, // 37: statement ->  selection_statement
     {321, 1}, // 38: statement ->  iteration_statement
     {321, 1}, // 39: statement ->  assignment_statement
     {321, 3}, // 40: statement (RETURN) ->  RETURN expression ';'
     {322, 1}, // 41: assignment_statement (';') ->  ';'
     {322, 2}, // 42: assignment_statement (';') ->  expression ';'
     {323, 1}, // 43: expression ->  logical_or_expression
     {323, 4}, // 44: expression ('=') ->  unary_expression '=' #0003 expression
     {324, 0}, // 45: #0003 ->  <empty>
     {325, 1}, // 46: logical_or_expression ->  logical_and_expression
     {325, 3}, // 47: logical_or_expression (OR_OP) ->  logical_or_expression OR_OP logical_and_expression
     {326, 1}, // 48: logical_and_expression ->  equality_expression
     {326, 3}, // 49: logical_and_expression (AND_OP) ->  logical_and_expression AND_OP equality_expression
     {327, 1}, // 50: equality_expression ->  relational_expression
     {327, 3}, // 51: equality_expression (EQ_OP) ->  equality_expression EQ_OP relational_expression
     {327, 3}, // 52: equality_expression (NE_OP) ->  equality_expression NE_OP relational_expression
     {328, 1}, // 53: relational_expression ->  additive_expression
     {328, 3}, // 54: relational_expression ('<') ->  relational_expression '<' additive_expression
     {328, 3}, // 55: relational_expression ('>') ->  relational_expression '>' additive_expression
     {328, 3}, // 56: relational_expression (LE_OP) ->  relational_expression LE_OP additive_expression
     {328, 3}, // 57: relational_expression (GE_OP) ->  relational_expression GE_OP additive_expression
     {329, 1}, // 58: additive_expression ->  multiplicative_expression
     {329, 3}, // 59: additive_expression ('+') ->  additive_expression '+' multiplicative_expression
     {329, 3}, // 60: additive_expression ('-') ->  additive_expression '-' multiplicative_expression
     {330, 1}, // 61: multiplicative_expression ->  unary_expression
     {330, 3}, // 62: multiplicative_expression ('*') ->  multiplicative_expression '*' unary_expression
     {330, 3}, // 63: multiplicative_expression ('/') ->  multiplicative_expression '/' unary_expression
     {331, 1}, // 64: unary_expression ->  postfix_expression
     {331, 2}, // 65: unary_expression ->  unary_operator unary_expression
     {332, 1}, // 66: postfix_expression ->  primary_expression
     {332, 3}, // 67: postfix_expression (IDENTIFIER) ->  IDENTIFIER '(' ')'
     {332, 5}, // 68: postfix_expression (IDENTIFIER) ->  IDENTIFIER '(' #0004 expression_list ')'
     {333, 0}, // 69: #0004 ->  <empty>
     {332, 5}, // 70: postfix_expression ('[') ->  postfix_expression '[' #0005 expression ']'
     {334, 0}, // 71: #0005 ->  <empty>
     {332, 4}, // 72: postfix_expression ('.') ->  postfix_expression '.' #0006 IDENTIFIER
     {335, 0}, // 73: #0006 ->  <empty>
     {332, 4}, // 74: postfix_expression (PTR_OP) ->  postfix_expression #0007 PTR_OP IDENTIFIER
     {336, 0}, // 75: #0007 ->  <empty>
     {332, 2}, // 76: postfix_expression (INC_OP) ->  postfix_expression INC_OP
     {337, 2}, // 77: expression_list ->  #0008 expression
     {338, 0}, // 78: #0008 ->  <empty>
     {337, 4}, // 79: expression_list (',') ->  expression_list ',' #0009 expression
     {339, 0}, // 80: #0009 ->  <empty>
     {340, 1}, // 81: unary_operator ('-') ->  '-'
     {340, 1}, // 82: unary_operator ('!') ->  '!'
     {340, 1}, // 83: unary_operator ('&') ->  '&'
     {340, 1}, // 84: unary_operator ('*') ->  '*'
     {341, 7}, // 85: selection_statement (IF) ->  IF '(' expression ')' statement ELSE statement
     {342, 5}, // 86: iteration_statement (WHILE) ->  WHILE '(' expression ')' statement
     {342, 9}, // 87: iteration_statement (FOR) ->  FOR '(' expression ';' expression ';' expression ')' statement
     {307, 1}, // 88: declaration_list ->  declaration
     {307, 2}, // 89: declaration_list ->  declaration_list declaration
     {343, 3}, // 90: declaration (';') ->  type_specifier declarator_list ';'
     {345, 0}, // 91: M_decl ->  <empty>
     {344, 2}, // 92: declarator_list ->  M_decl declarator
     {344, 4}, // 93: declarator_list (',') ->  declarator_list ',' M_decl declarator
     {346, 1}, // 94: start_$ ->  start
};

// State info and SR__ transitions for each state.


SR__ s_0[] =
{
    { { REQ_TOKEN}, { 12} },                        
    { {       303}, {  1} }, // start               
    { {       304}, {  2} }, // translation_unit    
    { {       305}, {  3} }, // struct_specifier    
    { {       309}, {  4} }, // function_definition 
    { {       306}, {  5} }, // M_struct_specifier  
    { {       308}, {  6} }, // M_fun_type_specifier
    { {       274}, {  7} }, // STRUCT              
    { {       312}, {  8} }, // type_specifier      
    { {       257}, {  9} }, // VOID                
    { {       258}, { 10} }, // INT                 
    { {       259}, { 11} }, // FLOAT               
    { {         0}, {  0} },                        
};

SR__ s_1[] =
{
    { { REQ_TOKEN}, {            2} }, 
    { {     _EOF_}, { PARSE_ACCEPT} }, 
    { {         0}, {            0} }, 
};

SR__ s_2[] =
{
    { { REQ_DEF}, { 10} },                        
    { {     309}, { 12} }, // function_definition 
    { {     305}, { 13} }, // struct_specifier    
    { {     308}, {  6} }, // M_fun_type_specifier
    { {     306}, {  5} }, // M_struct_specifier  
    { {     312}, {  8} }, // type_specifier      
    { {     274}, {  7} }, // STRUCT              
    { {     257}, {  9} }, // VOID                
    { {     258}, { 10} }, // INT                 
    { {     259}, { 11} }, // FLOAT               
    { {       0}, { -1} },                        
};

SR__ s_3[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -2} }, 
};

SR__ s_4[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -3} }, 
};

SR__ s_5[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       123}, { 14} }, // '{'
    { {         0}, {  0} },       
};

SR__ s_6[] =
{
    { { REQ_TOKEN}, {  4} },                  
    { {       310}, { 15} }, // fun_declarator
    { {       275}, { 16} }, // IDENTIFIER    
    { {        42}, { 17} }, // '*'           
    { {         0}, {  0} },                  
};

SR__ s_7[] =
{
    { { REQ_TOKEN}, {  2} },              
    { {       275}, { 18} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_8[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -8} }, 
};

SR__ s_9[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -11} }, 
};

SR__ s_10[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR__ s_11[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR__ s_12[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR__ s_13[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -5} }, 
};

SR__ s_14[] =
{
    { { REQ_TOKEN}, {  8} },                    
    { {       307}, { 19} }, // declaration_list
    { {       343}, { 20} }, // declaration     
    { {       312}, { 21} }, // type_specifier  
    { {       257}, {  9} }, // VOID            
    { {       258}, { 10} }, // INT             
    { {       259}, { 11} }, // FLOAT           
    { {       274}, { 22} }, // STRUCT          
    { {         0}, {  0} },                    
};

SR__ s_15[] =
{
    { { DEF_RED}, {   2} },         
    { {     311}, {  23} }, // #0001
    { {       0}, { -10} },         
};

SR__ s_16[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 24} }, // '('
    { {         0}, {  0} },       
};

SR__ s_17[] =
{
    { { REQ_TOKEN}, {  4} },                  
    { {       310}, { 25} }, // fun_declarator
    { {       275}, { 16} }, // IDENTIFIER    
    { {        42}, { 17} }, // '*'           
    { {         0}, {  0} },                  
};

SR__ s_18[] =
{
    { { REQ_DEF}, {   2} },       
    { {     123}, {  -6} }, // '{'
    { {       0}, { -14} },       
};

SR__ s_19[] =
{
    { { REQ_TOKEN}, {  8} },                  
    { {       125}, { 26} }, // '}'           
    { {       343}, { 27} }, // declaration   
    { {       312}, { 21} }, // type_specifier
    { {       257}, {  9} }, // VOID          
    { {       258}, { 10} }, // INT           
    { {       259}, { 11} }, // FLOAT         
    { {       274}, { 22} }, // STRUCT        
    { {         0}, {  0} },                  
};

SR__ s_20[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -88} }, 
};

SR__ s_21[] =
{
    { { DEF_RED}, {   3} },                   
    { {     344}, {  28} }, // declarator_list
    { {     345}, {  29} }, // M_decl         
    { {       0}, { -91} },                   
};

SR__ s_22[] =
{
    { { REQ_TOKEN}, {  2} },              
    { {       275}, { 30} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_23[] =
{
    { { REQ_TOKEN}, {  3} },                      
    { {       319}, { 31} }, // compound_statement
    { {       123}, { 32} }, // '{'               
    { {         0}, {  0} },                      
};

SR__ s_24[] =
{
    { { REQ_TOKEN}, { 10} },                         
    { {       313}, { 33} }, // parameter_list       
    { {        41}, { 34} }, // ')'                  
    { {       314}, { 35} }, // parameter_declaration
    { {       315}, { 36} }, // M_parameter_type     
    { {       312}, { 37} }, // type_specifier       
    { {       257}, {  9} }, // VOID                 
    { {       258}, { 10} }, // INT                  
    { {       259}, { 11} }, // FLOAT                
    { {       274}, { 22} }, // STRUCT               
    { {         0}, {  0} },                         
};

SR__ s_25[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -17} }, 
};

SR__ s_26[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        59}, { 38} }, // ';'
    { {         0}, {  0} },       
};

SR__ s_27[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -89} }, 
};

SR__ s_28[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {        59}, { 39} }, // ';'
    { {        44}, { 40} }, // ','
    { {         0}, {  0} },       
};

SR__ s_29[] =
{
    { { REQ_TOKEN}, {  4} },              
    { {       316}, { 41} }, // declarator
    { {       275}, { 42} }, // IDENTIFIER
    { {        42}, { 43} }, // '*'       
    { {         0}, {  0} },              
};

SR__ s_30[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR__ s_31[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -9} }, 
};

SR__ s_32[] =
{
    { { REQ_TOKEN}, { 40} },                             
    { {       125}, { 44} }, // '}'                      
    { {       320}, { 45} }, // statement_list           
    { {       307}, { 46} }, // declaration_list         
    { {       321}, { 47} }, // statement                
    { {       343}, { 20} }, // declaration              
    { {       123}, { 48} }, // '{'                      
    { {       341}, { 49} }, // selection_statement      
    { {       342}, { 50} }, // iteration_statement      
    { {       322}, { 51} }, // assignment_statement     
    { {       273}, { 52} }, // RETURN                   
    { {       312}, { 21} }, // type_specifier           
    { {       269}, { 53} }, // IF                       
    { {       271}, { 54} }, // WHILE                    
    { {       272}, { 55} }, // FOR                      
    { {        59}, { 56} }, // ';'                      
    { {       323}, { 57} }, // expression               
    { {       257}, {  9} }, // VOID                     
    { {       258}, { 10} }, // INT                      
    { {       259}, { 11} }, // FLOAT                    
    { {       274}, { 22} }, // STRUCT                   
    { {       325}, { 58} }, // logical_or_expression    
    { {       331}, { 59} }, // unary_expression         
    { {       326}, { 60} }, // logical_and_expression   
    { {       332}, { 61} }, // postfix_expression       
    { {       340}, { 62} }, // unary_operator           
    { {       327}, { 63} }, // equality_expression      
    { {       318}, { 64} }, // primary_expression       
    { {       275}, { 65} }, // IDENTIFIER               
    { {        45}, { 66} }, // '-'                      
    { {        33}, { 67} }, // '!'                      
    { {        38}, { 68} }, // '&'                      
    { {        42}, { 69} }, // '*'                      
    { {       328}, { 70} }, // relational_expression    
    { {       261}, { 71} }, // INT_CONSTANT             
    { {       260}, { 72} }, // FLOAT_CONSTANT           
    { {       268}, { 73} }, // STRING_LITERAL           
    { {        40}, { 74} }, // '('                      
    { {       329}, { 75} }, // additive_expression      
    { {       330}, { 76} }, // multiplicative_expression
    { {         0}, {  0} },                             
};

SR__ s_33[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {        41}, { 77} }, // ')'
    { {        44}, { 78} }, // ','
    { {         0}, {  0} },       
};

SR__ s_34[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR__ s_35[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -18} }, 
};

SR__ s_36[] =
{
    { { REQ_TOKEN}, {  4} },              
    { {       316}, { 79} }, // declarator
    { {       275}, { 42} }, // IDENTIFIER
    { {        42}, { 43} }, // '*'       
    { {         0}, {  0} },              
};

SR__ s_37[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -20} }, 
};

SR__ s_38[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -7} }, 
};

SR__ s_39[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -90} }, 
};

SR__ s_40[] =
{
    { { DEF_RED}, {   2} },          
    { {     345}, {  80} }, // M_decl
    { {       0}, { -91} },          
};

SR__ s_41[] =
{
    { { REQ_DEF}, {   2} },       
    { {      91}, {  81} }, // '['
    { {       0}, { -92} },       
};

SR__ s_42[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR__ s_43[] =
{
    { { REQ_TOKEN}, {  4} },              
    { {       316}, { 82} }, // declarator
    { {       275}, { 42} }, // IDENTIFIER
    { {        42}, { 43} }, // '*'       
    { {         0}, {  0} },              
};

SR__ s_44[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -31} }, 
};

SR__ s_45[] =
{
    { { REQ_TOKEN}, { 32} },                             
    { {       125}, { 83} }, // '}'                      
    { {       321}, { 84} }, // statement                
    { {       123}, { 48} }, // '{'                      
    { {       341}, { 49} }, // selection_statement      
    { {       342}, { 50} }, // iteration_statement      
    { {       322}, { 51} }, // assignment_statement     
    { {       273}, { 52} }, // RETURN                   
    { {       269}, { 53} }, // IF                       
    { {       271}, { 54} }, // WHILE                    
    { {       272}, { 55} }, // FOR                      
    { {        59}, { 56} }, // ';'                      
    { {       323}, { 57} }, // expression               
    { {       325}, { 58} }, // logical_or_expression    
    { {       331}, { 59} }, // unary_expression         
    { {       326}, { 60} }, // logical_and_expression   
    { {       332}, { 61} }, // postfix_expression       
    { {       340}, { 62} }, // unary_operator           
    { {       327}, { 63} }, // equality_expression      
    { {       318}, { 64} }, // primary_expression       
    { {       275}, { 65} }, // IDENTIFIER               
    { {        45}, { 66} }, // '-'                      
    { {        33}, { 67} }, // '!'                      
    { {        38}, { 68} }, // '&'                      
    { {        42}, { 69} }, // '*'                      
    { {       328}, { 70} }, // relational_expression    
    { {       261}, { 71} }, // INT_CONSTANT             
    { {       260}, { 72} }, // FLOAT_CONSTANT           
    { {       268}, { 73} }, // STRING_LITERAL           
    { {        40}, { 74} }, // '('                      
    { {       329}, { 75} }, // additive_expression      
    { {       330}, { 76} }, // multiplicative_expression
    { {         0}, {  0} },                             
};

SR__ s_46[] =
{
    { { REQ_TOKEN}, { 38} },                             
    { {       320}, { 85} }, // statement_list           
    { {       343}, { 27} }, // declaration              
    { {       321}, { 47} }, // statement                
    { {       312}, { 21} }, // type_specifier           
    { {       123}, { 48} }, // '{'                      
    { {       341}, { 49} }, // selection_statement      
    { {       342}, { 50} }, // iteration_statement      
    { {       322}, { 51} }, // assignment_statement     
    { {       273}, { 52} }, // RETURN                   
    { {       257}, {  9} }, // VOID                     
    { {       258}, { 10} }, // INT                      
    { {       259}, { 11} }, // FLOAT                    
    { {       274}, { 22} }, // STRUCT                   
    { {       269}, { 53} }, // IF                       
    { {       271}, { 54} }, // WHILE                    
    { {       272}, { 55} }, // FOR                      
    { {        59}, { 56} }, // ';'                      
    { {       323}, { 57} }, // expression               
    { {       325}, { 58} }, // logical_or_expression    
    { {       331}, { 59} }, // unary_expression         
    { {       326}, { 60} }, // logical_and_expression   
    { {       332}, { 61} }, // postfix_expression       
    { {       340}, { 62} }, // unary_operator           
    { {       327}, { 63} }, // equality_expression      
    { {       318}, { 64} }, // primary_expression       
    { {       275}, { 65} }, // IDENTIFIER               
    { {        45}, { 66} }, // '-'                      
    { {        33}, { 67} }, // '!'                      
    { {        38}, { 68} }, // '&'                      
    { {        42}, { 69} }, // '*'                      
    { {       328}, { 70} }, // relational_expression    
    { {       261}, { 71} }, // INT_CONSTANT             
    { {       260}, { 72} }, // FLOAT_CONSTANT           
    { {       268}, { 73} }, // STRING_LITERAL           
    { {        40}, { 74} }, // '('                      
    { {       329}, { 75} }, // additive_expression      
    { {       330}, { 76} }, // multiplicative_expression
    { {         0}, {  0} },                             
};

SR__ s_47[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -34} }, 
};

SR__ s_48[] =
{
    { { REQ_TOKEN}, { 32} },                             
    { {       320}, { 86} }, // statement_list           
    { {       321}, { 47} }, // statement                
    { {       123}, { 48} }, // '{'                      
    { {       341}, { 49} }, // selection_statement      
    { {       342}, { 50} }, // iteration_statement      
    { {       322}, { 51} }, // assignment_statement     
    { {       273}, { 52} }, // RETURN                   
    { {       269}, { 53} }, // IF                       
    { {       271}, { 54} }, // WHILE                    
    { {       272}, { 55} }, // FOR                      
    { {        59}, { 56} }, // ';'                      
    { {       323}, { 57} }, // expression               
    { {       325}, { 58} }, // logical_or_expression    
    { {       331}, { 59} }, // unary_expression         
    { {       326}, { 60} }, // logical_and_expression   
    { {       332}, { 61} }, // postfix_expression       
    { {       340}, { 62} }, // unary_operator           
    { {       327}, { 63} }, // equality_expression      
    { {       318}, { 64} }, // primary_expression       
    { {       275}, { 65} }, // IDENTIFIER               
    { {        45}, { 66} }, // '-'                      
    { {        33}, { 67} }, // '!'                      
    { {        38}, { 68} }, // '&'                      
    { {        42}, { 69} }, // '*'                      
    { {       328}, { 70} }, // relational_expression    
    { {       261}, { 71} }, // INT_CONSTANT             
    { {       260}, { 72} }, // FLOAT_CONSTANT           
    { {       268}, { 73} }, // STRING_LITERAL           
    { {        40}, { 74} }, // '('                      
    { {       329}, { 75} }, // additive_expression      
    { {       330}, { 76} }, // multiplicative_expression
    { {         0}, {  0} },                             
};

SR__ s_49[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -37} }, 
};

SR__ s_50[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -38} }, 
};

SR__ s_51[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -39} }, 
};

SR__ s_52[] =
{
    { { REQ_TOKEN}, { 21} },                             
    { {       323}, { 87} }, // expression               
    { {       325}, { 58} }, // logical_or_expression    
    { {       331}, { 59} }, // unary_expression         
    { {       326}, { 60} }, // logical_and_expression   
    { {       332}, { 61} }, // postfix_expression       
    { {       340}, { 62} }, // unary_operator           
    { {       327}, { 63} }, // equality_expression      
    { {       318}, { 64} }, // primary_expression       
    { {       275}, { 65} }, // IDENTIFIER               
    { {        45}, { 66} }, // '-'                      
    { {        33}, { 67} }, // '!'                      
    { {        38}, { 68} }, // '&'                      
    { {        42}, { 69} }, // '*'                      
    { {       328}, { 70} }, // relational_expression    
    { {       261}, { 71} }, // INT_CONSTANT             
    { {       260}, { 72} }, // FLOAT_CONSTANT           
    { {       268}, { 73} }, // STRING_LITERAL           
    { {        40}, { 74} }, // '('                      
    { {       329}, { 75} }, // additive_expression      
    { {       330}, { 76} }, // multiplicative_expression
    { {         0}, {  0} },                             
};

SR__ s_53[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 88} }, // '('
    { {         0}, {  0} },       
};

SR__ s_54[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 89} }, // '('
    { {         0}, {  0} },       
};

SR__ s_55[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 90} }, // '('
    { {         0}, {  0} },       
};

SR__ s_56[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -41} }, 
};

SR__ s_57[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        59}, { 91} }, // ';'
    { {         0}, {  0} },       
};

SR__ s_58[] =
{
    { { REQ_DEF}, {   2} },         
    { {     263}, {  92} }, // OR_OP
    { {       0}, { -43} },         
};

SR__ s_59[] =
{
    { { REQ_DEF}, {   2} },       
    { {      61}, {  93} }, // '='
    { {       0}, { -61} },       
};

SR__ s_60[] =
{
    { { REQ_DEF}, {   2} },          
    { {     262}, {  94} }, // AND_OP
    { {       0}, { -46} },          
};

SR__ s_61[] =
{
    { { REQ_DEF}, {  22} },          
    { {      91}, {  95} }, // '['   
    { {      46}, {  96} }, // '.'   
    { {     336}, {  97} }, // #0007 
    { {     276}, {  98} }, // INC_OP
    { {     262}, { -64} }, // AND_OP
    { {     263}, { -64} }, // OR_OP 
    { {     264}, { -64} }, // EQ_OP 
    { {     265}, { -64} }, // NE_OP 
    { {     266}, { -64} }, // GE_OP 
    { {     267}, { -64} }, // LE_OP 
    { {      59}, { -64} }, // ';'   
    { {      42}, { -64} }, // '*'   
    { {      41}, { -64} }, // ')'   
    { {      44}, { -64} }, // ','   
    { {      93}, { -64} }, // ']'   
    { {      61}, { -64} }, // '='   
    { {      60}, { -64} }, // '<'   
    { {      62}, { -64} }, // '>'   
    { {      43}, { -64} }, // '+'   
    { {      45}, { -64} }, // '-'   
    { {      47}, { -64} }, // '/'   
    { {       0}, { -75} },          
};

SR__ s_62[] =
{
    { { REQ_TOKEN}, { 14} },                      
    { {       331}, { 99} }, // unary_expression  
    { {       332}, { 61} }, // postfix_expression
    { {       340}, { 62} }, // unary_operator    
    { {       318}, { 64} }, // primary_expression
    { {       275}, { 65} }, // IDENTIFIER        
    { {        45}, { 66} }, // '-'               
    { {        33}, { 67} }, // '!'               
    { {        38}, { 68} }, // '&'               
    { {        42}, { 69} }, // '*'               
    { {       261}, { 71} }, // INT_CONSTANT      
    { {       260}, { 72} }, // FLOAT_CONSTANT    
    { {       268}, { 73} }, // STRING_LITERAL    
    { {        40}, { 74} }, // '('               
    { {         0}, {  0} },                      
};

SR__ s_63[] =
{
    { { REQ_DEF}, {   3} },         
    { {     264}, { 100} }, // EQ_OP
    { {     265}, { 101} }, // NE_OP
    { {       0}, { -48} },         
};

SR__ s_64[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -66} }, 
};

SR__ s_65[] =
{
    { { REQ_DEF}, {   2} },       
    { {      40}, { 102} }, // '('
    { {       0}, { -26} },       
};

SR__ s_66[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -81} }, 
};

SR__ s_67[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -82} }, 
};

SR__ s_68[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -83} }, 
};

SR__ s_69[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -84} }, 
};

SR__ s_70[] =
{
    { { REQ_DEF}, {   5} },         
    { {      60}, { 103} }, // '<'  
    { {      62}, { 104} }, // '>'  
    { {     267}, { 105} }, // LE_OP
    { {     266}, { 106} }, // GE_OP
    { {       0}, { -50} },         
};

SR__ s_71[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -27} }, 
};

SR__ s_72[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -28} }, 
};

SR__ s_73[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -29} }, 
};

SR__ s_74[] =
{
    { { REQ_TOKEN}, {  21} },                             
    { {       323}, { 107} }, // expression               
    { {       325}, {  58} }, // logical_or_expression    
    { {       331}, {  59} }, // unary_expression         
    { {       326}, {  60} }, // logical_and_expression   
    { {       332}, {  61} }, // postfix_expression       
    { {       340}, {  62} }, // unary_operator           
    { {       327}, {  63} }, // equality_expression      
    { {       318}, {  64} }, // primary_expression       
    { {       275}, {  65} }, // IDENTIFIER               
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {        42}, {  69} }, // '*'                      
    { {       328}, {  70} }, // relational_expression    
    { {       261}, {  71} }, // INT_CONSTANT             
    { {       260}, {  72} }, // FLOAT_CONSTANT           
    { {       268}, {  73} }, // STRING_LITERAL           
    { {        40}, {  74} }, // '('                      
    { {       329}, {  75} }, // additive_expression      
    { {       330}, {  76} }, // multiplicative_expression
    { {         0}, {   0} },                             
};

SR__ s_75[] =
{
    { { REQ_DEF}, {   3} },       
    { {      43}, { 108} }, // '+'
    { {      45}, { 109} }, // '-'
    { {       0}, { -53} },       
};

SR__ s_76[] =
{
    { { REQ_DEF}, {   3} },       
    { {      42}, { 110} }, // '*'
    { {      47}, { 111} }, // '/'
    { {       0}, { -58} },       
};

SR__ s_77[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -15} }, 
};

SR__ s_78[] =
{
    { { REQ_TOKEN}, {   8} },                         
    { {       314}, { 112} }, // parameter_declaration
    { {       315}, {  36} }, // M_parameter_type     
    { {       312}, {  37} }, // type_specifier       
    { {       257}, {   9} }, // VOID                 
    { {       258}, {  10} }, // INT                  
    { {       259}, {  11} }, // FLOAT                
    { {       274}, {  22} }, // STRUCT               
    { {         0}, {   0} },                         
};

SR__ s_79[] =
{
    { { REQ_DEF}, {   2} },       
    { {      91}, {  81} }, // '['
    { {       0}, { -21} },       
};

SR__ s_80[] =
{
    { { REQ_TOKEN}, {   4} },              
    { {       316}, { 113} }, // declarator
    { {       275}, {  42} }, // IDENTIFIER
    { {        42}, {  43} }, // '*'       
    { {         0}, {   0} },              
};

SR__ s_81[] =
{
    { { DEF_RED}, {   2} },         
    { {     317}, { 114} }, // #0002
    { {       0}, { -24} },         
};

SR__ s_82[] =
{
    { { REQ_DEF}, {   2} },       
    { {      91}, {  81} }, // '['
    { {       0}, { -25} },       
};

SR__ s_83[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -32} }, 
};

SR__ s_84[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -35} }, 
};

SR__ s_85[] =
{
    { { REQ_TOKEN}, {  32} },                             
    { {       125}, { 115} }, // '}'                      
    { {       321}, {  84} }, // statement                
    { {       123}, {  48} }, // '{'                      
    { {       341}, {  49} }, // selection_statement      
    { {       342}, {  50} }, // iteration_statement      
    { {       322}, {  51} }, // assignment_statement     
    { {       273}, {  52} }, // RETURN                   
    { {       269}, {  53} }, // IF                       
    { {       271}, {  54} }, // WHILE                    
    { {       272}, {  55} }, // FOR                      
    { {        59}, {  56} }, // ';'                      
    { {       323}, {  57} }, // expression               
    { {       325}, {  58} }, // logical_or_expression    
    { {       331}, {  59} }, // unary_expression         
    { {       326}, {  60} }, // logical_and_expression   
    { {       332}, {  61} }, // postfix_expression       
    { {       340}, {  62} }, // unary_operator           
    { {       327}, {  63} }, // equality_expression      
    { {       318}, {  64} }, // primary_expression       
    { {       275}, {  65} }, // IDENTIFIER               
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {        42}, {  69} }, // '*'                      
    { {       328}, {  70} }, // relational_expression    
    { {       261}, {  71} }, // INT_CONSTANT             
    { {       260}, {  72} }, // FLOAT_CONSTANT           
    { {       268}, {  73} }, // STRING_LITERAL           
    { {        40}, {  74} }, // '('                      
    { {       329}, {  75} }, // additive_expression      
    { {       330}, {  76} }, // multiplicative_expression
    { {         0}, {   0} },                             
};

SR__ s_86[] =
{
    { { REQ_TOKEN}, {  32} },                             
    { {       125}, { 116} }, // '}'                      
    { {       321}, {  84} }, // statement                
    { {       123}, {  48} }, // '{'                      
    { {       341}, {  49} }, // selection_statement      
    { {       342}, {  50} }, // iteration_statement      
    { {       322}, {  51} }, // assignment_statement     
    { {       273}, {  52} }, // RETURN                   
    { {       269}, {  53} }, // IF                       
    { {       271}, {  54} }, // WHILE                    
    { {       272}, {  55} }, // FOR                      
    { {        59}, {  56} }, // ';'                      
    { {       323}, {  57} }, // expression               
    { {       325}, {  58} }, // logical_or_expression    
    { {       331}, {  59} }, // unary_expression         
    { {       326}, {  60} }, // logical_and_expression   
    { {       332}, {  61} }, // postfix_expression       
    { {       340}, {  62} }, // unary_operator           
    { {       327}, {  63} }, // equality_expression      
    { {       318}, {  64} }, // primary_expression       
    { {       275}, {  65} }, // IDENTIFIER               
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {        42}, {  69} }, // '*'                      
    { {       328}, {  70} }, // relational_expression    
    { {       261}, {  71} }, // INT_CONSTANT             
    { {       260}, {  72} }, // FLOAT_CONSTANT           
    { {       268}, {  73} }, // STRING_LITERAL           
    { {        40}, {  74} }, // '('                      
    { {       329}, {  75} }, // additive_expression      
    { {       330}, {  76} }, // multiplicative_expression
    { {         0}, {   0} },                             
};

SR__ s_87[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 117} }, // ';'
    { {         0}, {   0} },       
};

SR__ s_88[] =
{
    { { REQ_TOKEN}, {  21} },                             
    { {       323}, { 118} }, // expression               
    { {       325}, {  58} }, // logical_or_expression    
    { {       331}, {  59} }, // unary_expression         
    { {       326}, {  60} }, // logical_and_expression   
    { {       332}, {  61} }, // postfix_expression       
    { {       340}, {  62} }, // unary_operator           
    { {       327}, {  63} }, // equality_expression      
    { {       318}, {  64} }, // primary_expression       
    { {       275}, {  65} }, // IDENTIFIER               
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {        42}, {  69} }, // '*'                      
    { {       328}, {  70} }, // relational_expression    
    { {       261}, {  71} }, // INT_CONSTANT             
    { {       260}, {  72} }, // FLOAT_CONSTANT           
    { {       268}, {  73} }, // STRING_LITERAL           
    { {        40}, {  74} }, // '('                      
    { {       329}, {  75} }, // additive_expression      
    { {       330}, {  76} }, // multiplicative_expression
    { {         0}, {   0} },                             
};

SR__ s_89[] =
{
    { { REQ_TOKEN}, {  21} },                             
    { {       323}, { 119} }, // expression               
    { {       325}, {  58} }, // logical_or_expression    
    { {       331}, {  59} }, // unary_expression         
    { {       326}, {  60} }, // logical_and_expression   
    { {       332}, {  61} }, // postfix_expression       
    { {       340}, {  62} }, // unary_operator           
    { {       327}, {  63} }, // equality_expression      
    { {       318}, {  64} }, // primary_expression       
    { {       275}, {  65} }, // IDENTIFIER               
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {        42}, {  69} }, // '*'                      
    { {       328}, {  70} }, // relational_expression    
    { {       261}, {  71} }, // INT_CONSTANT             
    { {       260}, {  72} }, // FLOAT_CONSTANT           
    { {       268}, {  73} }, // STRING_LITERAL           
    { {        40}, {  74} }, // '('                      
    { {       329}, {  75} }, // additive_expression      
    { {       330}, {  76} }, // multiplicative_expression
    { {         0}, {   0} },                             
};

SR__ s_90[] =
{
    { { REQ_TOKEN}, {  21} },                             
    { {       323}, { 120} }, // expression               
    { {       325}, {  58} }, // logical_or_expression    
    { {       331}, {  59} }, // unary_expression         
    { {       326}, {  60} }, // logical_and_expression   
    { {       332}, {  61} }, // postfix_expression       
    { {       340}, {  62} }, // unary_operator           
    { {       327}, {  63} }, // equality_expression      
    { {       318}, {  64} }, // primary_expression       
    { {       275}, {  65} }, // IDENTIFIER               
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {        42}, {  69} }, // '*'                      
    { {       328}, {  70} }, // relational_expression    
    { {       261}, {  71} }, // INT_CONSTANT             
    { {       260}, {  72} }, // FLOAT_CONSTANT           
    { {       268}, {  73} }, // STRING_LITERAL           
    { {        40}, {  74} }, // '('                      
    { {       329}, {  75} }, // additive_expression      
    { {       330}, {  76} }, // multiplicative_expression
    { {         0}, {   0} },                             
};

SR__ s_91[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -42} }, 
};

SR__ s_92[] =
{
    { { REQ_TOKEN}, {  19} },                             
    { {       326}, { 121} }, // logical_and_expression   
    { {       327}, {  63} }, // equality_expression      
    { {       328}, {  70} }, // relational_expression    
    { {       329}, {  75} }, // additive_expression      
    { {       330}, {  76} }, // multiplicative_expression
    { {       331}, { 122} }, // unary_expression         
    { {       332}, {  61} }, // postfix_expression       
    { {       340}, {  62} }, // unary_operator           
    { {       318}, {  64} }, // primary_expression       
    { {       275}, {  65} }, // IDENTIFIER               
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {        42}, {  69} }, // '*'                      
    { {       261}, {  71} }, // INT_CONSTANT             
    { {       260}, {  72} }, // FLOAT_CONSTANT           
    { {       268}, {  73} }, // STRING_LITERAL           
    { {        40}, {  74} }, // '('                      
    { {         0}, {   0} },                             
};

SR__ s_93[] =
{
    { { DEF_RED}, {   2} },         
    { {     324}, { 123} }, // #0003
    { {       0}, { -45} },         
};

SR__ s_94[] =
{
    { { REQ_TOKEN}, {  18} },                             
    { {       327}, { 124} }, // equality_expression      
    { {       328}, {  70} }, // relational_expression    
    { {       329}, {  75} }, // additive_expression      
    { {       330}, {  76} }, // multiplicative_expression
    { {       331}, { 122} }, // unary_expression         
    { {       332}, {  61} }, // postfix_expression       
    { {       340}, {  62} }, // unary_operator           
    { {       318}, {  64} }, // primary_expression       
    { {       275}, {  65} }, // IDENTIFIER               
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {        42}, {  69} }, // '*'                      
    { {       261}, {  71} }, // INT_CONSTANT             
    { {       260}, {  72} }, // FLOAT_CONSTANT           
    { {       268}, {  73} }, // STRING_LITERAL           
    { {        40}, {  74} }, // '('                      
    { {         0}, {   0} },                             
};

SR__ s_95[] =
{
    { { DEF_RED}, {   2} },         
    { {     334}, { 125} }, // #0005
    { {       0}, { -71} },         
};

SR__ s_96[] =
{
    { { DEF_RED}, {   2} },         
    { {     335}, { 126} }, // #0006
    { {       0}, { -73} },         
};

SR__ s_97[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {       277}, { 127} }, // PTR_OP
    { {         0}, {   0} },          
};

SR__ s_98[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -76} }, 
};

SR__ s_99[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -65} }, 
};

SR__ s_100[] =
{
    { { REQ_TOKEN}, {  17} },                             
    { {       328}, { 128} }, // relational_expression    
    { {       329}, {  75} }, // additive_expression      
    { {       330}, {  76} }, // multiplicative_expression
    { {       331}, { 122} }, // unary_expression         
    { {       332}, {  61} }, // postfix_expression       
    { {       340}, {  62} }, // unary_operator           
    { {       318}, {  64} }, // primary_expression       
    { {       275}, {  65} }, // IDENTIFIER               
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {        42}, {  69} }, // '*'                      
    { {       261}, {  71} }, // INT_CONSTANT             
    { {       260}, {  72} }, // FLOAT_CONSTANT           
    { {       268}, {  73} }, // STRING_LITERAL           
    { {        40}, {  74} }, // '('                      
    { {         0}, {   0} },                             
};

SR__ s_101[] =
{
    { { REQ_TOKEN}, {  17} },                             
    { {       328}, { 129} }, // relational_expression    
    { {       329}, {  75} }, // additive_expression      
    { {       330}, {  76} }, // multiplicative_expression
    { {       331}, { 122} }, // unary_expression         
    { {       332}, {  61} }, // postfix_expression       
    { {       340}, {  62} }, // unary_operator           
    { {       318}, {  64} }, // primary_expression       
    { {       275}, {  65} }, // IDENTIFIER               
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {        42}, {  69} }, // '*'                      
    { {       261}, {  71} }, // INT_CONSTANT             
    { {       260}, {  72} }, // FLOAT_CONSTANT           
    { {       268}, {  73} }, // STRING_LITERAL           
    { {        40}, {  74} }, // '('                      
    { {         0}, {   0} },                             
};

SR__ s_102[] =
{
    { { REQ_DEF}, {   3} },         
    { {      41}, { 130} }, // ')'  
    { {     333}, { 131} }, // #0004
    { {       0}, { -69} },         
};

SR__ s_103[] =
{
    { { REQ_TOKEN}, {  16} },                             
    { {       329}, { 132} }, // additive_expression      
    { {       330}, {  76} }, // multiplicative_expression
    { {       331}, { 122} }, // unary_expression         
    { {       332}, {  61} }, // postfix_expression       
    { {       340}, {  62} }, // unary_operator           
    { {       318}, {  64} }, // primary_expression       
    { {       275}, {  65} }, // IDENTIFIER               
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {        42}, {  69} }, // '*'                      
    { {       261}, {  71} }, // INT_CONSTANT             
    { {       260}, {  72} }, // FLOAT_CONSTANT           
    { {       268}, {  73} }, // STRING_LITERAL           
    { {        40}, {  74} }, // '('                      
    { {         0}, {   0} },                             
};

SR__ s_104[] =
{
    { { REQ_TOKEN}, {  16} },                             
    { {       329}, { 133} }, // additive_expression      
    { {       330}, {  76} }, // multiplicative_expression
    { {       331}, { 122} }, // unary_expression         
    { {       332}, {  61} }, // postfix_expression       
    { {       340}, {  62} }, // unary_operator           
    { {       318}, {  64} }, // primary_expression       
    { {       275}, {  65} }, // IDENTIFIER               
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {        42}, {  69} }, // '*'                      
    { {       261}, {  71} }, // INT_CONSTANT             
    { {       260}, {  72} }, // FLOAT_CONSTANT           
    { {       268}, {  73} }, // STRING_LITERAL           
    { {        40}, {  74} }, // '('                      
    { {         0}, {   0} },                             
};

SR__ s_105[] =
{
    { { REQ_TOKEN}, {  16} },                             
    { {       329}, { 134} }, // additive_expression      
    { {       330}, {  76} }, // multiplicative_expression
    { {       331}, { 122} }, // unary_expression         
    { {       332}, {  61} }, // postfix_expression       
    { {       340}, {  62} }, // unary_operator           
    { {       318}, {  64} }, // primary_expression       
    { {       275}, {  65} }, // IDENTIFIER               
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {        42}, {  69} }, // '*'                      
    { {       261}, {  71} }, // INT_CONSTANT             
    { {       260}, {  72} }, // FLOAT_CONSTANT           
    { {       268}, {  73} }, // STRING_LITERAL           
    { {        40}, {  74} }, // '('                      
    { {         0}, {   0} },                             
};

SR__ s_106[] =
{
    { { REQ_TOKEN}, {  16} },                             
    { {       329}, { 135} }, // additive_expression      
    { {       330}, {  76} }, // multiplicative_expression
    { {       331}, { 122} }, // unary_expression         
    { {       332}, {  61} }, // postfix_expression       
    { {       340}, {  62} }, // unary_operator           
    { {       318}, {  64} }, // primary_expression       
    { {       275}, {  65} }, // IDENTIFIER               
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {        42}, {  69} }, // '*'                      
    { {       261}, {  71} }, // INT_CONSTANT             
    { {       260}, {  72} }, // FLOAT_CONSTANT           
    { {       268}, {  73} }, // STRING_LITERAL           
    { {        40}, {  74} }, // '('                      
    { {         0}, {   0} },                             
};

SR__ s_107[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 136} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_108[] =
{
    { { REQ_TOKEN}, {  15} },                             
    { {       330}, { 137} }, // multiplicative_expression
    { {       331}, { 122} }, // unary_expression         
    { {       332}, {  61} }, // postfix_expression       
    { {       340}, {  62} }, // unary_operator           
    { {       318}, {  64} }, // primary_expression       
    { {       275}, {  65} }, // IDENTIFIER               
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {        42}, {  69} }, // '*'                      
    { {       261}, {  71} }, // INT_CONSTANT             
    { {       260}, {  72} }, // FLOAT_CONSTANT           
    { {       268}, {  73} }, // STRING_LITERAL           
    { {        40}, {  74} }, // '('                      
    { {         0}, {   0} },                             
};

SR__ s_109[] =
{
    { { REQ_TOKEN}, {  15} },                             
    { {       330}, { 138} }, // multiplicative_expression
    { {       331}, { 122} }, // unary_expression         
    { {       332}, {  61} }, // postfix_expression       
    { {       340}, {  62} }, // unary_operator           
    { {       318}, {  64} }, // primary_expression       
    { {       275}, {  65} }, // IDENTIFIER               
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {        42}, {  69} }, // '*'                      
    { {       261}, {  71} }, // INT_CONSTANT             
    { {       260}, {  72} }, // FLOAT_CONSTANT           
    { {       268}, {  73} }, // STRING_LITERAL           
    { {        40}, {  74} }, // '('                      
    { {         0}, {   0} },                             
};

SR__ s_110[] =
{
    { { REQ_TOKEN}, {  14} },                      
    { {       331}, { 139} }, // unary_expression  
    { {       332}, {  61} }, // postfix_expression
    { {       340}, {  62} }, // unary_operator    
    { {       318}, {  64} }, // primary_expression
    { {       275}, {  65} }, // IDENTIFIER        
    { {        45}, {  66} }, // '-'               
    { {        33}, {  67} }, // '!'               
    { {        38}, {  68} }, // '&'               
    { {        42}, {  69} }, // '*'               
    { {       261}, {  71} }, // INT_CONSTANT      
    { {       260}, {  72} }, // FLOAT_CONSTANT    
    { {       268}, {  73} }, // STRING_LITERAL    
    { {        40}, {  74} }, // '('               
    { {         0}, {   0} },                      
};

SR__ s_111[] =
{
    { { REQ_TOKEN}, {  14} },                      
    { {       331}, { 140} }, // unary_expression  
    { {       332}, {  61} }, // postfix_expression
    { {       340}, {  62} }, // unary_operator    
    { {       318}, {  64} }, // primary_expression
    { {       275}, {  65} }, // IDENTIFIER        
    { {        45}, {  66} }, // '-'               
    { {        33}, {  67} }, // '!'               
    { {        38}, {  68} }, // '&'               
    { {        42}, {  69} }, // '*'               
    { {       261}, {  71} }, // INT_CONSTANT      
    { {       260}, {  72} }, // FLOAT_CONSTANT    
    { {       268}, {  73} }, // STRING_LITERAL    
    { {        40}, {  74} }, // '('               
    { {         0}, {   0} },                      
};

SR__ s_112[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR__ s_113[] =
{
    { { REQ_DEF}, {   2} },       
    { {      91}, {  81} }, // '['
    { {       0}, { -93} },       
};

SR__ s_114[] =
{
    { { REQ_TOKEN}, {   7} },                      
    { {       318}, { 141} }, // primary_expression
    { {       275}, { 142} }, // IDENTIFIER        
    { {       261}, {  71} }, // INT_CONSTANT      
    { {       260}, {  72} }, // FLOAT_CONSTANT    
    { {       268}, {  73} }, // STRING_LITERAL    
    { {        40}, {  74} }, // '('               
    { {         0}, {   0} },                      
};

SR__ s_115[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -33} }, 
};

SR__ s_116[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -36} }, 
};

SR__ s_117[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -40} }, 
};

SR__ s_118[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 143} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_119[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 144} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_120[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 145} }, // ';'
    { {         0}, {   0} },       
};

SR__ s_121[] =
{
    { { REQ_DEF}, {   2} },          
    { {     262}, {  94} }, // AND_OP
    { {       0}, { -47} },          
};

SR__ s_122[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -61} }, 
};

SR__ s_123[] =
{
    { { REQ_TOKEN}, {  21} },                             
    { {       323}, { 146} }, // expression               
    { {       325}, {  58} }, // logical_or_expression    
    { {       331}, {  59} }, // unary_expression         
    { {       326}, {  60} }, // logical_and_expression   
    { {       332}, {  61} }, // postfix_expression       
    { {       340}, {  62} }, // unary_operator           
    { {       327}, {  63} }, // equality_expression      
    { {       318}, {  64} }, // primary_expression       
    { {       275}, {  65} }, // IDENTIFIER               
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {        42}, {  69} }, // '*'                      
    { {       328}, {  70} }, // relational_expression    
    { {       261}, {  71} }, // INT_CONSTANT             
    { {       260}, {  72} }, // FLOAT_CONSTANT           
    { {       268}, {  73} }, // STRING_LITERAL           
    { {        40}, {  74} }, // '('                      
    { {       329}, {  75} }, // additive_expression      
    { {       330}, {  76} }, // multiplicative_expression
    { {         0}, {   0} },                             
};

SR__ s_124[] =
{
    { { REQ_DEF}, {   3} },         
    { {     264}, { 100} }, // EQ_OP
    { {     265}, { 101} }, // NE_OP
    { {       0}, { -49} },         
};

SR__ s_125[] =
{
    { { REQ_TOKEN}, {  21} },                             
    { {       323}, { 147} }, // expression               
    { {       325}, {  58} }, // logical_or_expression    
    { {       331}, {  59} }, // unary_expression         
    { {       326}, {  60} }, // logical_and_expression   
    { {       332}, {  61} }, // postfix_expression       
    { {       340}, {  62} }, // unary_operator           
    { {       327}, {  63} }, // equality_expression      
    { {       318}, {  64} }, // primary_expression       
    { {       275}, {  65} }, // IDENTIFIER               
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {        42}, {  69} }, // '*'                      
    { {       328}, {  70} }, // relational_expression    
    { {       261}, {  71} }, // INT_CONSTANT             
    { {       260}, {  72} }, // FLOAT_CONSTANT           
    { {       268}, {  73} }, // STRING_LITERAL           
    { {        40}, {  74} }, // '('                      
    { {       329}, {  75} }, // additive_expression      
    { {       330}, {  76} }, // multiplicative_expression
    { {         0}, {   0} },                             
};

SR__ s_126[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       275}, { 148} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_127[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       275}, { 149} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_128[] =
{
    { { REQ_DEF}, {   5} },         
    { {      60}, { 103} }, // '<'  
    { {      62}, { 104} }, // '>'  
    { {     267}, { 105} }, // LE_OP
    { {     266}, { 106} }, // GE_OP
    { {       0}, { -51} },         
};

SR__ s_129[] =
{
    { { REQ_DEF}, {   5} },         
    { {      60}, { 103} }, // '<'  
    { {      62}, { 104} }, // '>'  
    { {     267}, { 105} }, // LE_OP
    { {     266}, { 106} }, // GE_OP
    { {       0}, { -52} },         
};

SR__ s_130[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -67} }, 
};

SR__ s_131[] =
{
    { { DEF_RED}, {   3} },                   
    { {     337}, { 150} }, // expression_list
    { {     338}, { 151} }, // #0008          
    { {       0}, { -78} },                   
};

SR__ s_132[] =
{
    { { REQ_DEF}, {   3} },       
    { {      43}, { 108} }, // '+'
    { {      45}, { 109} }, // '-'
    { {       0}, { -54} },       
};

SR__ s_133[] =
{
    { { REQ_DEF}, {   3} },       
    { {      43}, { 108} }, // '+'
    { {      45}, { 109} }, // '-'
    { {       0}, { -55} },       
};

SR__ s_134[] =
{
    { { REQ_DEF}, {   3} },       
    { {      43}, { 108} }, // '+'
    { {      45}, { 109} }, // '-'
    { {       0}, { -56} },       
};

SR__ s_135[] =
{
    { { REQ_DEF}, {   3} },       
    { {      43}, { 108} }, // '+'
    { {      45}, { 109} }, // '-'
    { {       0}, { -57} },       
};

SR__ s_136[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -30} }, 
};

SR__ s_137[] =
{
    { { REQ_DEF}, {   3} },       
    { {      42}, { 110} }, // '*'
    { {      47}, { 111} }, // '/'
    { {       0}, { -59} },       
};

SR__ s_138[] =
{
    { { REQ_DEF}, {   3} },       
    { {      42}, { 110} }, // '*'
    { {      47}, { 111} }, // '/'
    { {       0}, { -60} },       
};

SR__ s_139[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -62} }, 
};

SR__ s_140[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -63} }, 
};

SR__ s_141[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        93}, { 152} }, // ']'
    { {         0}, {   0} },       
};

SR__ s_142[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};

SR__ s_143[] =
{
    { { REQ_TOKEN}, {  31} },                             
    { {       321}, { 153} }, // statement                
    { {       123}, {  48} }, // '{'                      
    { {       341}, {  49} }, // selection_statement      
    { {       342}, {  50} }, // iteration_statement      
    { {       322}, {  51} }, // assignment_statement     
    { {       273}, {  52} }, // RETURN                   
    { {       269}, {  53} }, // IF                       
    { {       271}, {  54} }, // WHILE                    
    { {       272}, {  55} }, // FOR                      
    { {        59}, {  56} }, // ';'                      
    { {       323}, {  57} }, // expression               
    { {       325}, {  58} }, // logical_or_expression    
    { {       331}, {  59} }, // unary_expression         
    { {       326}, {  60} }, // logical_and_expression   
    { {       332}, {  61} }, // postfix_expression       
    { {       340}, {  62} }, // unary_operator           
    { {       327}, {  63} }, // equality_expression      
    { {       318}, {  64} }, // primary_expression       
    { {       275}, {  65} }, // IDENTIFIER               
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {        42}, {  69} }, // '*'                      
    { {       328}, {  70} }, // relational_expression    
    { {       261}, {  71} }, // INT_CONSTANT             
    { {       260}, {  72} }, // FLOAT_CONSTANT           
    { {       268}, {  73} }, // STRING_LITERAL           
    { {        40}, {  74} }, // '('                      
    { {       329}, {  75} }, // additive_expression      
    { {       330}, {  76} }, // multiplicative_expression
    { {         0}, {   0} },                             
};

SR__ s_144[] =
{
    { { REQ_TOKEN}, {  31} },                             
    { {       321}, { 154} }, // statement                
    { {       123}, {  48} }, // '{'                      
    { {       341}, {  49} }, // selection_statement      
    { {       342}, {  50} }, // iteration_statement      
    { {       322}, {  51} }, // assignment_statement     
    { {       273}, {  52} }, // RETURN                   
    { {       269}, {  53} }, // IF                       
    { {       271}, {  54} }, // WHILE                    
    { {       272}, {  55} }, // FOR                      
    { {        59}, {  56} }, // ';'                      
    { {       323}, {  57} }, // expression               
    { {       325}, {  58} }, // logical_or_expression    
    { {       331}, {  59} }, // unary_expression         
    { {       326}, {  60} }, // logical_and_expression   
    { {       332}, {  61} }, // postfix_expression       
    { {       340}, {  62} }, // unary_operator           
    { {       327}, {  63} }, // equality_expression      
    { {       318}, {  64} }, // primary_expression       
    { {       275}, {  65} }, // IDENTIFIER               
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {        42}, {  69} }, // '*'                      
    { {       328}, {  70} }, // relational_expression    
    { {       261}, {  71} }, // INT_CONSTANT             
    { {       260}, {  72} }, // FLOAT_CONSTANT           
    { {       268}, {  73} }, // STRING_LITERAL           
    { {        40}, {  74} }, // '('                      
    { {       329}, {  75} }, // additive_expression      
    { {       330}, {  76} }, // multiplicative_expression
    { {         0}, {   0} },                             
};

SR__ s_145[] =
{
    { { REQ_TOKEN}, {  21} },                             
    { {       323}, { 155} }, // expression               
    { {       325}, {  58} }, // logical_or_expression    
    { {       331}, {  59} }, // unary_expression         
    { {       326}, {  60} }, // logical_and_expression   
    { {       332}, {  61} }, // postfix_expression       
    { {       340}, {  62} }, // unary_operator           
    { {       327}, {  63} }, // equality_expression      
    { {       318}, {  64} }, // primary_expression       
    { {       275}, {  65} }, // IDENTIFIER               
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {        42}, {  69} }, // '*'                      
    { {       328}, {  70} }, // relational_expression    
    { {       261}, {  71} }, // INT_CONSTANT             
    { {       260}, {  72} }, // FLOAT_CONSTANT           
    { {       268}, {  73} }, // STRING_LITERAL           
    { {        40}, {  74} }, // '('                      
    { {       329}, {  75} }, // additive_expression      
    { {       330}, {  76} }, // multiplicative_expression
    { {         0}, {   0} },                             
};

SR__ s_146[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -44} }, 
};

SR__ s_147[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        93}, { 156} }, // ']'
    { {         0}, {   0} },       
};

SR__ s_148[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -72} }, 
};

SR__ s_149[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -74} }, 
};

SR__ s_150[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 157} }, // ')'
    { {        44}, { 158} }, // ','
    { {         0}, {   0} },       
};

SR__ s_151[] =
{
    { { REQ_TOKEN}, {  21} },                             
    { {       323}, { 159} }, // expression               
    { {       325}, {  58} }, // logical_or_expression    
    { {       331}, {  59} }, // unary_expression         
    { {       326}, {  60} }, // logical_and_expression   
    { {       332}, {  61} }, // postfix_expression       
    { {       340}, {  62} }, // unary_operator           
    { {       327}, {  63} }, // equality_expression      
    { {       318}, {  64} }, // primary_expression       
    { {       275}, {  65} }, // IDENTIFIER               
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {        42}, {  69} }, // '*'                      
    { {       328}, {  70} }, // relational_expression    
    { {       261}, {  71} }, // INT_CONSTANT             
    { {       260}, {  72} }, // FLOAT_CONSTANT           
    { {       268}, {  73} }, // STRING_LITERAL           
    { {        40}, {  74} }, // '('                      
    { {       329}, {  75} }, // additive_expression      
    { {       330}, {  76} }, // multiplicative_expression
    { {         0}, {   0} },                             
};

SR__ s_152[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -23} }, 
};

SR__ s_153[] =
{
    { { REQ_TOKEN}, {   2} },        
    { {       270}, { 160} }, // ELSE
    { {         0}, {   0} },        
};

SR__ s_154[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -86} }, 
};

SR__ s_155[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 161} }, // ';'
    { {         0}, {   0} },       
};

SR__ s_156[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -70} }, 
};

SR__ s_157[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -68} }, 
};

SR__ s_158[] =
{
    { { DEF_RED}, {   2} },         
    { {     339}, { 162} }, // #0009
    { {       0}, { -80} },         
};

SR__ s_159[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -77} }, 
};

SR__ s_160[] =
{
    { { REQ_TOKEN}, {  31} },                             
    { {       321}, { 163} }, // statement                
    { {       123}, {  48} }, // '{'                      
    { {       341}, {  49} }, // selection_statement      
    { {       342}, {  50} }, // iteration_statement      
    { {       322}, {  51} }, // assignment_statement     
    { {       273}, {  52} }, // RETURN                   
    { {       269}, {  53} }, // IF                       
    { {       271}, {  54} }, // WHILE                    
    { {       272}, {  55} }, // FOR                      
    { {        59}, {  56} }, // ';'                      
    { {       323}, {  57} }, // expression               
    { {       325}, {  58} }, // logical_or_expression    
    { {       331}, {  59} }, // unary_expression         
    { {       326}, {  60} }, // logical_and_expression   
    { {       332}, {  61} }, // postfix_expression       
    { {       340}, {  62} }, // unary_operator           
    { {       327}, {  63} }, // equality_expression      
    { {       318}, {  64} }, // primary_expression       
    { {       275}, {  65} }, // IDENTIFIER               
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {        42}, {  69} }, // '*'                      
    { {       328}, {  70} }, // relational_expression    
    { {       261}, {  71} }, // INT_CONSTANT             
    { {       260}, {  72} }, // FLOAT_CONSTANT           
    { {       268}, {  73} }, // STRING_LITERAL           
    { {        40}, {  74} }, // '('                      
    { {       329}, {  75} }, // additive_expression      
    { {       330}, {  76} }, // multiplicative_expression
    { {         0}, {   0} },                             
};

SR__ s_161[] =
{
    { { REQ_TOKEN}, {  21} },                             
    { {       323}, { 164} }, // expression               
    { {       325}, {  58} }, // logical_or_expression    
    { {       331}, {  59} }, // unary_expression         
    { {       326}, {  60} }, // logical_and_expression   
    { {       332}, {  61} }, // postfix_expression       
    { {       340}, {  62} }, // unary_operator           
    { {       327}, {  63} }, // equality_expression      
    { {       318}, {  64} }, // primary_expression       
    { {       275}, {  65} }, // IDENTIFIER               
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {        42}, {  69} }, // '*'                      
    { {       328}, {  70} }, // relational_expression    
    { {       261}, {  71} }, // INT_CONSTANT             
    { {       260}, {  72} }, // FLOAT_CONSTANT           
    { {       268}, {  73} }, // STRING_LITERAL           
    { {        40}, {  74} }, // '('                      
    { {       329}, {  75} }, // additive_expression      
    { {       330}, {  76} }, // multiplicative_expression
    { {         0}, {   0} },                             
};

SR__ s_162[] =
{
    { { REQ_TOKEN}, {  21} },                             
    { {       323}, { 165} }, // expression               
    { {       325}, {  58} }, // logical_or_expression    
    { {       331}, {  59} }, // unary_expression         
    { {       326}, {  60} }, // logical_and_expression   
    { {       332}, {  61} }, // postfix_expression       
    { {       340}, {  62} }, // unary_operator           
    { {       327}, {  63} }, // equality_expression      
    { {       318}, {  64} }, // primary_expression       
    { {       275}, {  65} }, // IDENTIFIER               
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {        42}, {  69} }, // '*'                      
    { {       328}, {  70} }, // relational_expression    
    { {       261}, {  71} }, // INT_CONSTANT             
    { {       260}, {  72} }, // FLOAT_CONSTANT           
    { {       268}, {  73} }, // STRING_LITERAL           
    { {        40}, {  74} }, // '('                      
    { {       329}, {  75} }, // additive_expression      
    { {       330}, {  76} }, // multiplicative_expression
    { {         0}, {   0} },                             
};

SR__ s_163[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -85} }, 
};

SR__ s_164[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 166} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_165[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -79} }, 
};

SR__ s_166[] =
{
    { { REQ_TOKEN}, {  31} },                             
    { {       321}, { 167} }, // statement                
    { {       123}, {  48} }, // '{'                      
    { {       341}, {  49} }, // selection_statement      
    { {       342}, {  50} }, // iteration_statement      
    { {       322}, {  51} }, // assignment_statement     
    { {       273}, {  52} }, // RETURN                   
    { {       269}, {  53} }, // IF                       
    { {       271}, {  54} }, // WHILE                    
    { {       272}, {  55} }, // FOR                      
    { {        59}, {  56} }, // ';'                      
    { {       323}, {  57} }, // expression               
    { {       325}, {  58} }, // logical_or_expression    
    { {       331}, {  59} }, // unary_expression         
    { {       326}, {  60} }, // logical_and_expression   
    { {       332}, {  61} }, // postfix_expression       
    { {       340}, {  62} }, // unary_operator           
    { {       327}, {  63} }, // equality_expression      
    { {       318}, {  64} }, // primary_expression       
    { {       275}, {  65} }, // IDENTIFIER               
    { {        45}, {  66} }, // '-'                      
    { {        33}, {  67} }, // '!'                      
    { {        38}, {  68} }, // '&'                      
    { {        42}, {  69} }, // '*'                      
    { {       328}, {  70} }, // relational_expression    
    { {       261}, {  71} }, // INT_CONSTANT             
    { {       260}, {  72} }, // FLOAT_CONSTANT           
    { {       268}, {  73} }, // STRING_LITERAL           
    { {        40}, {  74} }, // '('                      
    { {       329}, {  75} }, // additive_expression      
    { {       330}, {  76} }, // multiplicative_expression
    { {         0}, {   0} },                             
};

SR__ s_167[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -87} }, 
};


// State array:
SR__ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,  s_111,  s_112,  s_113,  s_114,  s_115,  s_116,  s_117,  s_118,  s_119,
  s_120,  s_121,  s_122,  s_123,  s_124,  s_125,  s_126,  s_127,  s_128,  s_129,
  s_130,  s_131,  s_132,  s_133,  s_134,  s_135,  s_136,  s_137,  s_138,  s_139,
  s_140,  s_141,  s_142,  s_143,  s_144,  s_145,  s_146,  s_147,  s_148,  s_149,
  s_150,  s_151,  s_152,  s_153,  s_154,  s_155,  s_156,  s_157,  s_158,  s_159,
  s_160,  s_161,  s_162,  s_163,  s_164,  s_165,  s_166,  s_167,
};

} // anonymous namespace ends



// If the parsing function call uses arguments, then provide an overloaded
// function.  The code below doesn't rely on parameters, so no arguments are
// required.  Furthermore, parse uses a function try block to allow us to do
// ACCEPT and ABORT from anywhere, even from within members called by actions,
// simply throwing the appropriate exceptions.

int fn_count=0;bool pointer_lhs=false;bool lvalue= true; vector<int> star_list;  bool rhs=false; vector<bool> address_list;bool address=false;string fname="";string type;string fntype;bool array_constant=false;int loffset,goffset, width;vector< vector<string> > fncall_params;int count_star=0;global_symbol_table* global_sym_tab = new global_symbol_table();local_symbol_table* local_sym_tab = new local_symbol_table();lsymbol* locsym = new lsymbol();gsymbol* gsym = new gsymbol(); int argno;string currfn;string currstruct;  
ParserBase::ParserBase()
:
    d_stackIdx__(-1),
    // $insert debuginit
    d_debug__(false),
    d_nErrors__(0),
    // $insert requiredtokens
    d_requiredTokens__(0),
    d_acceptedTokens__(d_requiredTokens__),
    d_token__(_UNDETERMINED_),
    d_nextToken__(_UNDETERMINED_)
{}


Meta__::SType ParserBase::d_val__; 
int ParserBase::line_num=1; 
void Parser::print__()
{
// $insert print
}

void ParserBase::clearin()
{
    d_token__ = d_nextToken__ = _UNDETERMINED_;
}

void ParserBase::push__(size_t state)
{
    if (static_cast<size_t>(d_stackIdx__ + 1) == d_stateStack__.size())
    {
        size_t newSize = d_stackIdx__ + STACK_EXPANSION;
        d_stateStack__.resize(newSize);
        d_valueStack__.resize(newSize);
    }
    ++d_stackIdx__;
    d_stateStack__[d_stackIdx__] = d_state__ = state;
    *(d_vsp__ = &d_valueStack__[d_stackIdx__]) = d_val__;
}

void ParserBase::popToken__()
{
    d_token__ = d_nextToken__;

    d_val__ = d_nextVal__;
    d_nextVal__ = STYPE__();

    d_nextToken__ = _UNDETERMINED_;
}
     
void ParserBase::pushToken__(int token)
{
    d_nextToken__ = d_token__;
    d_nextVal__ = d_val__;
    d_token__ = token;
}
     
void ParserBase::pop__(size_t count)
{
    if (d_stackIdx__ < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx__ -= count;
    d_state__ = d_stateStack__[d_stackIdx__];
    d_vsp__ = &d_valueStack__[d_stackIdx__];
}

inline size_t ParserBase::top__() const
{
    return d_stateStack__[d_stackIdx__];
}

void Parser::executeAction(int production)
try
{
    if (d_token__ != _UNDETERMINED_)
        pushToken__(d_token__);     // save an already available token

                                    // save default non-nested block $$
    if (int size = s_productionInfo[production].d_size)
        d_val__ = d_vsp__[1 - size];

    switch (production)
    {
        // $insert actioncases
        
        case 1:
#line 16 "parse.y"
        {
         printData();
         printCode();
         }
        break;

        case 3:
#line 23 "parse.y"
        {
         d_val__.get<Tag__::stmt_ast>() = d_vsp__[0].data<Tag__::stmt_ast>();
         
         
         
         function_setup(local_sym_tab,global_sym_tab);
         d_val__.get<Tag__::stmt_ast>()->gencode(false,false);
         function_return();
         }
        break;

        case 4:
#line 32 "parse.y"
        {
         d_val__.get<Tag__::stmt_ast>() = d_vsp__[0].data<Tag__::stmt_ast>();
         
         
         
         
         
         function_setup(local_sym_tab,global_sym_tab);
         d_val__.get<Tag__::stmt_ast>()->gencode(false,false);
         function_return();
         }
        break;

        case 6:
#line 48 "parse.y"
        {
         
         gsym=new gsymbol();
         type="struct";
         gsym->type_list.push_back(type);
         gsym->name=d_vsp__[0].data<Tag__::String>();
         gsym->offset=loffset;
         gsym->func_tab=new local_symbol_table();
         loffset=0;
         local_sym_tab=gsym->func_tab;
         
         if(!getGlobalType(gsym->name,global_sym_tab).empty() && getGlobalType(gsym->name,global_sym_tab)[0].substr(0,6)=="struct"){
         cout<<"ERROR in line "<<line_num<<" :Symbol "<<gsym->name<<" already declared \n";
         exit(0);
         }
         global_sym_tab->sym.push_back(*gsym);
         }
        break;

        case 7:
#line 67 "parse.y"
        {
         gsym->width=loffset;
         global_sym_tab->sym.back().width=gsym->width;
         loffset=0;
         
         gsym->print();
         
         }
        break;

        case 8:
#line 77 "parse.y"
        {
         gsym=new gsymbol();
         
         fntype=type;
         
         gsym->width=width;
         gsym->offset=loffset;
         gsym->func_tab=new local_symbol_table();
         loffset=0;
         local_sym_tab=gsym->func_tab;
         }
        break;

        case 9:
#line 99 "parse.y"
        {
         
         gsym->print();
         
         d_val__.get<Tag__::stmt_ast>() = d_vsp__[0].data<Tag__::stmt_ast>();
         }
        break;

        case 10:
#line 90 "parse.y"
        d_val__ = d_vsp__[-1];
        {
         
         
         gsym->type_list.push_back(fntype);
         if(getGlobalType(gsym->name,global_sym_tab)[0]!=" " && getGlobalType(gsym->name,global_sym_tab)[0].substr(0,6)!="struct"){
         cout<<"ERROR in line  "<<line_num<<" :Symbol "<<gsym->name<<" already declared \n";
         exit(0);
         }
         global_sym_tab->sym.push_back(*gsym);
         }
        break;

        case 11:
#line 108 "parse.y"
        {type="void";width=0; d_val__.get<Tag__::stmt_ast>() = (stmt_ast*)new string_const("void");}
        break;

        case 12:
#line 109 "parse.y"
        {type="int";width=4; d_val__.get<Tag__::stmt_ast>() = (stmt_ast*)new string_const("int");}
        break;

        case 13:
#line 110 "parse.y"
        {type="float";width=4;d_val__.get<Tag__::stmt_ast>() = (stmt_ast*)new string_const("float");}
        break;

        case 14:
#line 111 "parse.y"
        {
         type="struct "+d_vsp__[0].data<Tag__::String>();
         if(getGlobalType(d_vsp__[0].data<Tag__::String>(),global_sym_tab)[0] != "struct"){ 
         cout<<"ERROR in line  "<<line_num<<" : Struct "<<d_vsp__[0].data<Tag__::String>()<<" not declared"<<endl;
         exit(0);
         }
         width=getStructSize(d_vsp__[0].data<Tag__::String>(),global_sym_tab);
         d_val__.get<Tag__::stmt_ast>() = (stmt_ast*)new string_const(type);
         }
        break;

        case 15:
#line 123 "parse.y"
        {
         loffset=0;
         gsym->name=d_vsp__[-3].data<Tag__::String>();
         
         
         }
        break;

        case 16:
#line 129 "parse.y"
        {
         gsym->name=d_vsp__[-2].data<Tag__::String>();
         }
        break;

        case 17:
#line 132 "parse.y"
        {
         gsym->width= 4;
         gsym->type_list.push_back("pointer");
         }
        break;

        case 18:
#line 141 "parse.y"
        {
         if(gsym->param_num ==0){
         
         local_sym_tab->sym[0].offset=-12; 
         }
         gsym->param_num=local_sym_tab->sym.size();
         }
        break;

        case 19:
#line 148 "parse.y"
        {
         loffset=-local_sym_tab->sym[0].width+local_sym_tab->sym[0].offset;
         
         
         
         
         for(int i=1;i<local_sym_tab->sym.size();i++){
         local_sym_tab->sym[i].offset=loffset;
         loffset-=local_sym_tab->sym[i].width; 
         }
         loffset=0;
         gsym->param_num=local_sym_tab->sym.size();
         }
        break;

        case 20:
#line 164 "parse.y"
        {
         locsym=new lsymbol();
         locsym->width=width;
         locsym->offset=loffset;
         }
        break;

        case 21:
#line 170 "parse.y"
        {
         locsym->type_list.push_back(type);
         if(!getLocalType(locsym->name,local_sym_tab).empty()){
         cout<<"ERROR in line  "<<line_num<<" :Symbol "<<locsym->name<<" already declared \n";
         exit(0);
         }
         if(locsym->type_list.size()==1 && type == "void"){cout<<"ERROR in line "<<line_num<<" : variable or field "<<locsym->name<<" declared void"<<endl;exit(0);}
         
         local_sym_tab->sym.push_back(*locsym);
         
         }
        break;

        case 22:
#line 184 "parse.y"
        {
         locsym->name=d_vsp__[0].data<Tag__::String>();
         }
        break;

        case 23:
#line 189 "parse.y"
        {array_constant=false;
         if(d_vsp__[-1].data<Tag__::exp_ast>()->exp_type.size()==1 && d_vsp__[-1].data<Tag__::exp_ast>()->exp_type[0]=="int"){
         locsym->type_list.push_back("array "+to_string(d_vsp__[-1].data<Tag__::exp_ast>()->val));
         locsym->width=locsym->width * d_vsp__[-1].data<Tag__::exp_ast>()->val;
         }
         else{cout<<"ERROR in line  "<<line_num<<" size of array is not an integer\n"; exit(0);}
         }
        break;

        case 24:
#line 188 "parse.y"
        d_val__ = d_vsp__[-1];
        {array_constant=true;}
        break;

        case 25:
#line 197 "parse.y"
        {
         locsym->width=4;
         locsym->type_list.push_back("pointer");
         }
        break;

        case 26:
#line 205 "parse.y"
        { 
         d_val__.get<Tag__::exp_ast>()=new Identifier(d_vsp__[0].data<Tag__::String>());
         vector<string> temp = getLocalType(d_vsp__[0].data<Tag__::String>(),local_sym_tab); 
         if(temp.size() == 0){
         cout<<"ERROR in line  "<<line_num<<" : "<<d_vsp__[0].data<Tag__::String>()<<" is not declared"<<endl;
         exit(0);
         
         }
         
         for(int i=0; i<temp.size(); i++){
         d_val__.get<Tag__::exp_ast>()->exp_type.push_back(temp[i]);
         }
         
         d_val__.get<Tag__::exp_ast>()->exp_type=rem_star(d_val__.get<Tag__::exp_ast>()->exp_type, count_star,line_num);
         
         
         
         if(d_val__.get<Tag__::exp_ast>()->exp_type.size()==1 && d_val__.get<Tag__::exp_ast>()->exp_type[0]=="void"){
         cout<<"ERROR: VOID * cannot be dereferenced"<<endl;
         exit(0);
         }
         
         count_star=0;
         
         
         
         d_val__.get<Tag__::exp_ast>()->label=1;
         
         }
        break;

        case 27:
#line 234 "parse.y"
        {
         d_val__.get<Tag__::exp_ast>()=new int_const(d_vsp__[0].data<Tag__::Int>());
         d_val__.get<Tag__::exp_ast>()->val=d_vsp__[0].data<Tag__::Int>(); 
         d_val__.get<Tag__::exp_ast>()->exp_type.push_back("int");
         
         if(!array_constant){lvalue=false;}
         else{lvalue=true;}
         
         
         d_val__.get<Tag__::exp_ast>()->label=1;
         }
        break;

        case 28:
#line 245 "parse.y"
        {
         
         d_val__.get<Tag__::exp_ast>()=new float_const(d_vsp__[0].data<Tag__::Float>());
         d_val__.get<Tag__::exp_ast>()->exp_type.push_back("float");
         lvalue=false;
         
         
         d_val__.get<Tag__::exp_ast>()->label=2;
         }
        break;

        case 29:
#line 255 "parse.y"
        {
         
         d_val__.get<Tag__::exp_ast>() = addString(d_vsp__[0].data<Tag__::String>()) ;
         
         d_val__.get<Tag__::exp_ast>()->exp_type.push_back("string");
         lvalue=false;
         
         
         d_val__.get<Tag__::exp_ast>()->label=1;
         }
        break;

        case 30:
#line 265 "parse.y"
        {
         d_val__.get<Tag__::exp_ast>()= d_vsp__[-1].data<Tag__::exp_ast>();
         }
        break;

        case 31:
#line 271 "parse.y"
        {
         d_val__.get<Tag__::stmt_ast>() = new seq();
         }
        break;

        case 32:
#line 274 "parse.y"
        {
         d_val__.get<Tag__::stmt_ast>()=d_vsp__[-1].data<Tag__::stmt_ast>();
         }
        break;

        case 33:
#line 277 "parse.y"
        {
         d_val__.get<Tag__::stmt_ast>()=d_vsp__[-1].data<Tag__::stmt_ast>();
         }
        break;

        case 34:
#line 283 "parse.y"
        {
         d_val__.get<Tag__::stmt_ast>() = new seq(d_vsp__[0].data<Tag__::stmt_ast>());
         }
        break;

        case 35:
#line 286 "parse.y"
        {
         ((seq*)d_vsp__[-1].data<Tag__::stmt_ast>())->vec.push_back(d_vsp__[0].data<Tag__::stmt_ast>());
         d_val__.get<Tag__::stmt_ast>()=d_vsp__[-1].data<Tag__::stmt_ast>();
         }
        break;

        case 36:
#line 293 "parse.y"
        {
         lvalue=true;
         d_val__.get<Tag__::stmt_ast>()=d_vsp__[-1].data<Tag__::stmt_ast>();
         }
        break;

        case 37:
#line 297 "parse.y"
        {
         lvalue=true;
         d_val__.get<Tag__::stmt_ast>()=d_vsp__[0].data<Tag__::stmt_ast>();
         }
        break;

        case 38:
#line 301 "parse.y"
        {
         lvalue=true;
         d_val__.get<Tag__::stmt_ast>()=d_vsp__[0].data<Tag__::stmt_ast>();
         }
        break;

        case 39:
#line 305 "parse.y"
        {
         lvalue=true;
         d_val__.get<Tag__::stmt_ast>()=d_vsp__[0].data<Tag__::stmt_ast>();
         }
        break;

        case 40:
#line 309 "parse.y"
        {
         lvalue=true;
         if(!matchType(gsym->type_list,d_vsp__[-1].data<Tag__::exp_ast>()->exp_type)){
         cout<<"ERROR in line  "<<line_num<<" : Return type invalid \n";
         exit(0);
         }
         
         d_val__.get<Tag__::stmt_ast>()= new Return(d_vsp__[-1].data<Tag__::exp_ast>()); 
         }
        break;

        case 41:
#line 321 "parse.y"
        {
         d_val__.get<Tag__::stmt_ast>()=new ass();
         }
        break;

        case 42:
#line 324 "parse.y"
        {
         
         d_val__.get<Tag__::stmt_ast>()=new new_ass(d_vsp__[-1].data<Tag__::exp_ast>());
         }
        break;

        case 43:
#line 331 "parse.y"
        {
         lvalue=true;
         }
        break;

        case 44:
#line 345 "parse.y"
        {
         lvalue = true;
         int l=getLabel(d_vsp__[-3].data<Tag__::exp_ast>()->label,d_vsp__[0].data<Tag__::exp_ast>()->label);
         oper2* t = new oper2("ASSIGN");
         if(!assignCheck(d_vsp__[-3].data<Tag__::exp_ast>(),d_vsp__[0].data<Tag__::exp_ast>(),t)){
         cout<<"ERROR in line  "<<line_num<<" : Incompatible Assignment \n";
         exit(0);
         }
         exp_ast* temp=d_vsp__[-3].data<Tag__::exp_ast>();
         d_val__.get<Tag__::exp_ast>()=new op2(d_vsp__[-3].data<Tag__::exp_ast>(),d_vsp__[0].data<Tag__::exp_ast>(),t);
         d_val__.get<Tag__::exp_ast>()->exp_type=temp->exp_type;
         
         d_val__.get<Tag__::exp_ast>()->label=l;
         
         
         }
        break;

        case 45:
#line 334 "parse.y"
        d_val__ = d_vsp__[-1];
        {
         
         if(d_vsp__[-1].data<Tag__::exp_ast>()->exp_type.size() ==1 && d_vsp__[-1].data<Tag__::exp_ast>()->exp_type[0] == "void"){
         cout<<"ERROR in line "<<line_num<<" : Invalid operation on Void"<<endl;
         exit(0);
         }
         if(!lvalue){
         cout<<"ERROR in line  "<<line_num<<" : left expression not valid \n";
         exit(0);
         }
         
         }
        break;

        case 47:
#line 369 "parse.y"
        {
         if(d_vsp__[-2].data<Tag__::exp_ast>()->exp_type[0].substr(0,6)=="struct" || d_vsp__[0].data<Tag__::exp_ast>()->exp_type[0].substr(0,6)=="struct"){
         cout<<"ERROR in line  "<<line_num<<" : Type Incompatible \n"; 
         exit(0);
         }
         int l = getLabel(d_vsp__[-2].data<Tag__::exp_ast>()->label,d_vsp__[0].data<Tag__::exp_ast>()->label);
         d_val__.get<Tag__::exp_ast>()=new op2(d_vsp__[-2].data<Tag__::exp_ast>(),d_vsp__[0].data<Tag__::exp_ast>(),new oper2("OR_OP"));
         d_val__.get<Tag__::exp_ast>()->exp_type.push_back("int");
         
         
         d_val__.get<Tag__::exp_ast>()->label = l;
         }
        break;

        case 49:
#line 384 "parse.y"
        {
         if(d_vsp__[-2].data<Tag__::exp_ast>()->exp_type[0].substr(0,6)=="struct" || d_vsp__[0].data<Tag__::exp_ast>()->exp_type[0].substr(0,6)=="struct"){
         cout<<"ERROR in line  "<<line_num<<" : Type Incompatible \n"; 
         exit(0);
         }
         int l = getLabel(d_vsp__[-2].data<Tag__::exp_ast>()->label,d_vsp__[0].data<Tag__::exp_ast>()->label);
         d_val__.get<Tag__::exp_ast>()=new op2(d_vsp__[-2].data<Tag__::exp_ast>(),d_vsp__[0].data<Tag__::exp_ast>(),new oper2("AND_OP"));
         d_val__.get<Tag__::exp_ast>()->exp_type.push_back("int");
         
         
         d_val__.get<Tag__::exp_ast>()->label = l;
         }
        break;

        case 51:
#line 400 "parse.y"
        {
         oper2* o = new oper2("EQ_OP");
         if(compatible(d_vsp__[-2].data<Tag__::exp_ast>(),d_vsp__[0].data<Tag__::exp_ast>(),o) == "NULL"){
         cout<<"ERROR in line   "<<line_num<<" : Type Incompatible \n"; 
         exit(0);
         }
         int l = getLabel(d_vsp__[-2].data<Tag__::exp_ast>()->label,d_vsp__[0].data<Tag__::exp_ast>()->label);
         d_val__.get<Tag__::exp_ast>()=new op2(d_vsp__[-2].data<Tag__::exp_ast>(),d_vsp__[0].data<Tag__::exp_ast>(),o);
         d_val__.get<Tag__::exp_ast>()->exp_type.push_back("int");
         
         d_val__.get<Tag__::exp_ast>()->label = l;
         
         }
        break;

        case 52:
#line 413 "parse.y"
        {
         oper2* o =new oper2("NE_OP");
         if(compatible(d_vsp__[-2].data<Tag__::exp_ast>(),d_vsp__[0].data<Tag__::exp_ast>(),o)=="NULL"){
         cout<<"ERROR in line  "<<line_num<<" : Type Incompatible \n"; 
         exit(0);
         }
         int l = getLabel(d_vsp__[-2].data<Tag__::exp_ast>()->label,d_vsp__[0].data<Tag__::exp_ast>()->label);
         d_val__.get<Tag__::exp_ast>()=new op2(d_vsp__[-2].data<Tag__::exp_ast>(),d_vsp__[0].data<Tag__::exp_ast>(),o);
         d_val__.get<Tag__::exp_ast>()->exp_type.push_back("int");
         
         d_val__.get<Tag__::exp_ast>()->label = l;
         }
        break;

        case 54:
#line 428 "parse.y"
        {
         oper2* o =new oper2("LT");
         if(compatible(d_vsp__[-2].data<Tag__::exp_ast>(),d_vsp__[0].data<Tag__::exp_ast>(),o)== "NULL"){
         cout<<"ERROR in line  "<<line_num<<" : Type Incompatible \n"; 
         exit(0);
         }
         int l = getLabel(d_vsp__[-2].data<Tag__::exp_ast>()->label,d_vsp__[0].data<Tag__::exp_ast>()->label);
         d_val__.get<Tag__::exp_ast>()=new op2(d_vsp__[-2].data<Tag__::exp_ast>(),d_vsp__[0].data<Tag__::exp_ast>(),o);
         d_val__.get<Tag__::exp_ast>()->exp_type.push_back("int");
         
         d_val__.get<Tag__::exp_ast>()->label = l;
         }
        break;

        case 55:
#line 440 "parse.y"
        {
         oper2* o =new oper2("GT");
         if(compatible(d_vsp__[-2].data<Tag__::exp_ast>(),d_vsp__[0].data<Tag__::exp_ast>(),o) == "NULL"){
         cout<<"ERROR in line  "<<line_num<<" : Type Incompatible \n"; 
         exit(0);
         }
         int l = getLabel(d_vsp__[-2].data<Tag__::exp_ast>()->label,d_vsp__[0].data<Tag__::exp_ast>()->label);
         d_val__.get<Tag__::exp_ast>()=new op2(d_vsp__[-2].data<Tag__::exp_ast>(),d_vsp__[0].data<Tag__::exp_ast>(),o);
         d_val__.get<Tag__::exp_ast>()->exp_type.push_back("int");
         
         d_val__.get<Tag__::exp_ast>()->label = l;
         }
        break;

        case 56:
#line 452 "parse.y"
        {
         oper2* o=new oper2("LE_OP");
         if(compatible(d_vsp__[-2].data<Tag__::exp_ast>(),d_vsp__[0].data<Tag__::exp_ast>(),o) == "NULL"){
         cout<<"ERROR in line  "<<line_num<<" : Type Incompatible \n"; 
         exit(0);
         }
         int l = getLabel(d_vsp__[-2].data<Tag__::exp_ast>()->label,d_vsp__[0].data<Tag__::exp_ast>()->label);
         d_val__.get<Tag__::exp_ast>()=new op2(d_vsp__[-2].data<Tag__::exp_ast>(),d_vsp__[0].data<Tag__::exp_ast>(),o);
         d_val__.get<Tag__::exp_ast>()->exp_type.push_back("int");
         
         
         d_val__.get<Tag__::exp_ast>()->label = l;
         
         }
        break;

        case 57:
#line 468 "parse.y"
        { oper2* o = new oper2("GE_OP");
         if(compatible(d_vsp__[-2].data<Tag__::exp_ast>(),d_vsp__[0].data<Tag__::exp_ast>(),o) == "NULL"){
         cout<<"ERROR in line  "<<line_num<<" : Type Incompatible \n"; 
         exit(0);
         }
         int l = getLabel(d_vsp__[-2].data<Tag__::exp_ast>()->label,d_vsp__[0].data<Tag__::exp_ast>()->label);
         d_val__.get<Tag__::exp_ast>()=new op2(d_vsp__[-2].data<Tag__::exp_ast>(),d_vsp__[0].data<Tag__::exp_ast>(),o);
         d_val__.get<Tag__::exp_ast>()->exp_type.push_back("int");
         
         
         d_val__.get<Tag__::exp_ast>()->label = l;
         }
        break;

        case 59:
#line 484 "parse.y"
        {
         oper2* x=new oper2("PLUS");
         string ret_type=compatible(d_vsp__[-2].data<Tag__::exp_ast>(),d_vsp__[0].data<Tag__::exp_ast>(),x);
         if(ret_type=="NULL"){
         cout<<"ERROR in line  "<<line_num<<" : Type Incompatible \n"; 
         exit(0);
         }
         int l = getLabel(d_vsp__[-2].data<Tag__::exp_ast>()->label,d_vsp__[0].data<Tag__::exp_ast>()->label);
         d_val__.get<Tag__::exp_ast>()=new op2(d_vsp__[-2].data<Tag__::exp_ast>(),d_vsp__[0].data<Tag__::exp_ast>(),x);
         d_val__.get<Tag__::exp_ast>()->exp_type.push_back(ret_type);
         lvalue= false;
         
         
         d_val__.get<Tag__::exp_ast>()->label = l;
         }
        break;

        case 60:
#line 499 "parse.y"
        {
         oper2* x=new oper2("MINUS");
         string ret_type=compatible(d_vsp__[-2].data<Tag__::exp_ast>(),d_vsp__[0].data<Tag__::exp_ast>(),x);
         if(ret_type=="NULL"){
         cout<<"ERROR in line  "<<line_num<<" : Type Incompatible \n"; 
         exit(0);
         }
         int l = getLabel(d_vsp__[-2].data<Tag__::exp_ast>()->label,d_vsp__[0].data<Tag__::exp_ast>()->label);
         d_val__.get<Tag__::exp_ast>()=new op2(d_vsp__[-2].data<Tag__::exp_ast>(),d_vsp__[0].data<Tag__::exp_ast>(),x);
         d_val__.get<Tag__::exp_ast>()->exp_type.push_back(ret_type);
         lvalue= false;
         
         
         d_val__.get<Tag__::exp_ast>()->label = l;
         }
        break;

        case 62:
#line 518 "parse.y"
        {
         oper2* x=new oper2("MULT");
         string ret_type=compatible(d_vsp__[-2].data<Tag__::exp_ast>(),d_vsp__[0].data<Tag__::exp_ast>(),x);
         if(ret_type=="NULL"){
         cout<<"ERROR in line  "<<line_num<<" : Type Incompatible \n"; 
         exit(0);
         }
         int l = getLabel(d_vsp__[-2].data<Tag__::exp_ast>()->label,d_vsp__[0].data<Tag__::exp_ast>()->label);
         d_val__.get<Tag__::exp_ast>()=new op2(d_vsp__[-2].data<Tag__::exp_ast>(),d_vsp__[0].data<Tag__::exp_ast>(),x);
         d_val__.get<Tag__::exp_ast>()->exp_type.push_back(ret_type);
         lvalue= false;
         
         
         d_val__.get<Tag__::exp_ast>()->label = l;
         }
        break;

        case 63:
#line 533 "parse.y"
        {
         oper2* x=new oper2("DIV");
         string ret_type=compatible(d_vsp__[-2].data<Tag__::exp_ast>(),d_vsp__[0].data<Tag__::exp_ast>(),x);
         if(ret_type=="NULL"){
         cout<<"ERROR in line  "<<line_num<<" : Type Incompatible \n"; 
         exit(0);
         }
         int l = getLabel(d_vsp__[-2].data<Tag__::exp_ast>()->label,d_vsp__[0].data<Tag__::exp_ast>()->label);
         d_val__.get<Tag__::exp_ast>()=new op2(d_vsp__[-2].data<Tag__::exp_ast>(),d_vsp__[0].data<Tag__::exp_ast>(),x);
         d_val__.get<Tag__::exp_ast>()->exp_type.push_back(ret_type);
         lvalue= false;
         
         
         d_val__.get<Tag__::exp_ast>()->label = l;
         }
        break;

        case 65:
#line 553 "parse.y"
        {
         
         d_val__.get<Tag__::exp_ast>()=new op1 (d_vsp__[0].data<Tag__::exp_ast>(),d_vsp__[-1].data<Tag__::Opr>());
         
         vector<string> temp;
         if(address){
         temp.push_back("pointer");
         
         }
         
         for(int i=0; i<d_vsp__[0].data<Tag__::exp_ast>()->exp_type.size();i++){
         temp.push_back(d_vsp__[0].data<Tag__::exp_ast>()->exp_type[i]);
         }
         
         d_val__.get<Tag__::exp_ast>()->exp_type = temp;
         if(d_val__.get<Tag__::exp_ast>()->exp_type.size()==1){
         if(d_val__.get<Tag__::exp_ast>()->exp_type[0]=="float"){ d_val__.get<Tag__::exp_ast>()->label=2;}
         if(d_val__.get<Tag__::exp_ast>()->exp_type[0].substr(0,5) =="struct"){ d_val__.get<Tag__::exp_ast>()->label=getStructSize(d_val__.get<Tag__::exp_ast>()->exp_type[0].substr(7),global_sym_tab)/4;}
         else{ d_val__.get<Tag__::exp_ast>()->label=1;}
         }
         else{
         d_val__.get<Tag__::exp_ast>()->label =1;
         }
         address =false;
         
         }
        break;

        case 66:
#line 584 "parse.y"
        {
         
         }
        break;

        case 67:
#line 588 "parse.y"
        { 
         int l= getStructSize(d_vsp__[-2].data<Tag__::String>(),global_sym_tab)/4;
         d_val__.get<Tag__::exp_ast>()=new func(d_vsp__[-2].data<Tag__::String>());
         d_val__.get<Tag__::exp_ast>()->exp_type=getGlobalType(d_vsp__[-2].data<Tag__::String>(),global_sym_tab);
         d_val__.get<Tag__::exp_ast>()->match_fncall(d_vsp__[-2].data<Tag__::String>(),global_sym_tab,line_num);
         lvalue=false;
         if(d_val__.get<Tag__::exp_ast>()->exp_type.size() == 1 && d_val__.get<Tag__::exp_ast>()->exp_type[0] =="int" && array_constant==true){
         lvalue=true;
         }
         
         
         d_val__.get<Tag__::exp_ast>()->label=l;
         }
        break;

        case 68:
#line 601 "parse.y"
        {
         
         d_val__.get<Tag__::exp_ast>() = d_vsp__[-1].data<Tag__::exp_ast>();
         if(fname!="printf"){
         d_val__.get<Tag__::exp_ast>()->label=getStructSize(d_vsp__[-4].data<Tag__::String>(),global_sym_tab)/4;
         d_val__.get<Tag__::exp_ast>()->exp_type=getGlobalType(d_vsp__[-4].data<Tag__::String>(),global_sym_tab); 
         d_val__.get<Tag__::exp_ast>()->match_fncall(d_vsp__[-4].data<Tag__::String>(),global_sym_tab,line_num);
         }
         lvalue=false;
         if(d_val__.get<Tag__::exp_ast>()->exp_type.size() == 1 && d_val__.get<Tag__::exp_ast>()->exp_type[0] =="int" && array_constant==true){
         lvalue=true;
         }
         
         }
        break;

        case 69:
#line 601 "parse.y"
        d_val__ = d_vsp__[-1];
        {fname=d_vsp__[-1].data<Tag__::String>();}
        break;

        case 70:
#line 615 "parse.y"
        {
         vector<string> temp = d_vsp__[-4].data<Tag__::exp_ast>()->exp_type;
         int l=getLabel(d_vsp__[-4].data<Tag__::exp_ast>()->label,d_vsp__[-1].data<Tag__::exp_ast>()->label+1);
         d_val__.get<Tag__::exp_ast>() = new array_ref(((Array*)d_vsp__[-4].data<Tag__::exp_ast>()), d_vsp__[-1].data<Tag__::exp_ast>());
         d_val__.get<Tag__::exp_ast>()->exp_type=temp;
         array_constant=false;
         d_val__.get<Tag__::exp_ast>()->exp_type=rem_dimension(d_val__.get<Tag__::exp_ast>()->exp_type,line_num);
         
         
         d_val__.get<Tag__::exp_ast>()->label=l;
         
         }
        break;

        case 71:
#line 615 "parse.y"
        d_val__ = d_vsp__[-1];
        {array_constant=true;}
        break;

        case 72:
#line 633 "parse.y"
        { 
         exp_ast* temp = d_vsp__[-3].data<Tag__::exp_ast>(); 
         vector<string> v = getMemType(d_vsp__[0].data<Tag__::String>(),temp->exp_type[0].substr(7),global_sym_tab);
         d_val__.get<Tag__::exp_ast>() = new op2(d_vsp__[-3].data<Tag__::exp_ast>(), new Identifier(d_vsp__[0].data<Tag__::String>()), new oper2("DOT"));
         int wid=getMemWidth(d_vsp__[0].data<Tag__::String>(),temp->exp_type[0].substr(7),global_sym_tab);
         if(v.empty()){
         cout<<"ERROR in line  "<<line_num<<" : No data member "<<d_vsp__[0].data<Tag__::String>()<<" for "<<temp->exp_type[0]<<endl;
         exit(0);
         }
         d_val__.get<Tag__::exp_ast>()->exp_type=v;
         d_val__.get<Tag__::exp_ast>()->label=getLabel(1,wid);
         }
        break;

        case 73:
#line 627 "parse.y"
        d_val__ = d_vsp__[-1];
        {
         
         if(d_vsp__[-1].data<Tag__::exp_ast>()->exp_type[0].substr(0,6) != "struct"){
         cout<<"ERROR in line  "<<line_num<<" : Invalid operation"<<endl;
         exit(0);
         }
         }
        break;

        case 74:
#line 656 "parse.y"
        { 
         exp_ast* temp = d_vsp__[-3].data<Tag__::exp_ast>(); 
         d_val__.get<Tag__::exp_ast>() = new op2(d_vsp__[-3].data<Tag__::exp_ast>(), new Identifier(d_vsp__[0].data<Tag__::String>()), new oper2("PTR_OP"));
         vector<string> v = getMemType(d_vsp__[0].data<Tag__::String>(),temp->exp_type[1].substr(7),global_sym_tab);
         int wid= getMemWidth(d_vsp__[0].data<Tag__::String>(),temp->exp_type[1].substr(7),global_sym_tab);
         if(v.empty()){
         cout<<"ERROR in line  "<<line_num<<" : No data member "<<d_vsp__[0].data<Tag__::String>()<<" for "<<temp->exp_type[1]<<endl;
         exit(0);
         }
         d_val__.get<Tag__::exp_ast>()->exp_type=v;
         d_val__.get<Tag__::exp_ast>()->label=getLabel(1,wid);
         }
        break;

        case 75:
#line 645 "parse.y"
        d_val__ = d_vsp__[0];
        {
         if(d_vsp__[0].data<Tag__::exp_ast>()->exp_type.size() != 2) {
         cout<<"ERROR in line  "<<line_num<<" : Invalid operation"<<endl;
         exit(0);
         }
         if(d_vsp__[0].data<Tag__::exp_ast>()->exp_type[1].substr(0,6) != "struct" || d_vsp__[0].data<Tag__::exp_ast>()->exp_type[0] != "pointer" ){
         cout<<"ERROR in line  "<<line_num<<" : Invalid operation"<<endl;
         exit(0);
         }
         
         }
        break;

        case 76:
#line 669 "parse.y"
        { if(lvalue!=true){
         cout<<"ERROR: in line "<<line_num<<" : Increment operator requires lvalue"<<endl;
         exit(0);
         }
         
         int l=d_vsp__[-1].data<Tag__::exp_ast>()->label;
         d_val__.get<Tag__::exp_ast>()=new op1(d_vsp__[-1].data<Tag__::exp_ast>(), new oper1("INC_OP"));
         lvalue=false;
         d_val__.get<Tag__::exp_ast>()->label=l;
         }
        break;

        case 77:
#line 684 "parse.y"
        {
         d_val__.get<Tag__::exp_ast>() = new func(fname,d_vsp__[0].data<Tag__::exp_ast>());
         }
        break;

        case 78:
#line 682 "parse.y"
        d_val__ = d_vsp__[1];
        {
         count_star=0;
         }
        break;

        case 79:
#line 689 "parse.y"
        {
         ((func*)d_vsp__[-3].data<Tag__::exp_ast>())->vec.push_back(d_vsp__[0].data<Tag__::exp_ast>());
         d_val__.get<Tag__::exp_ast>() = d_vsp__[-3].data<Tag__::exp_ast>(); 
         }
        break;

        case 80:
#line 687 "parse.y"
        d_val__ = d_vsp__[-1];
        {
         count_star=0;
         }
        break;

        case 81:
#line 696 "parse.y"
        { d_val__.get<Tag__::Opr>() = new oper1("UMINUS");
         lvalue=false;
         }
        break;

        case 82:
#line 699 "parse.y"
        { d_val__.get<Tag__::Opr>() = new oper1("NOT");
         lvalue=false;
         }
        break;

        case 83:
#line 702 "parse.y"
        { 
         d_val__.get<Tag__::Opr>() = new oper1("DEREF");
         address=true;
         lvalue=false;
         }
        break;

        case 84:
#line 707 "parse.y"
        { 
         d_val__.get<Tag__::Opr>() = new oper1("POINTER");
         count_star++;
         }
        break;

        case 85:
#line 715 "parse.y"
        {d_val__.get<Tag__::stmt_ast>() = new If(d_vsp__[-4].data<Tag__::exp_ast>(), d_vsp__[-2].data<Tag__::stmt_ast>(), d_vsp__[0].data<Tag__::stmt_ast>());}
        break;

        case 86:
#line 719 "parse.y"
        { 
         d_val__.get<Tag__::stmt_ast>() = new While(d_vsp__[-2].data<Tag__::exp_ast>(), d_vsp__[0].data<Tag__::stmt_ast>());
         }
        break;

        case 87:
#line 723 "parse.y"
        {
         d_val__.get<Tag__::stmt_ast>() = new For(d_vsp__[-6].data<Tag__::exp_ast>(), d_vsp__[-4].data<Tag__::exp_ast>(), d_vsp__[-2].data<Tag__::exp_ast>(), d_vsp__[0].data<Tag__::stmt_ast>());
         }
        break;

        case 91:
#line 738 "parse.y"
        { 
         locsym=new lsymbol();
         locsym->width=width;
         
         
         
         }
        break;

        case 92:
#line 747 "parse.y"
        {
         loffset+=locsym->width;
         locsym->offset=loffset;
         locsym->type_list.push_back(type);
         
         if(!getLocalType(locsym->name,local_sym_tab).empty()){
         cout<<"ERROR in line  "<<line_num<<" :Symbol "<<locsym->name<<" already declared \n";
         exit(0);
         }
         
         if(locsym->type_list[0] == gsym->type_list[0] +" "+gsym->name){
         cout<<"ERROR in line  "<<line_num<<" : type not allowed"<<endl;
         exit(0);
         }
         if(locsym->type_list.size()==1 && type == "void"){cout<<"ERROR in line  "<<line_num<<" : variable or field "<<locsym->name<<" declared void"<<endl;exit(0);}
         local_sym_tab->sym.push_back(*locsym);
         
         
         }
        break;

        case 93:
#line 766 "parse.y"
        {
         loffset+=locsym->width;
         locsym->offset=loffset;
         locsym->type_list.push_back(type);
         if(!getLocalType(locsym->name,local_sym_tab).empty()){
         cout<<"ERROR in line  "<<line_num<<" :Symbol "<<locsym->name<<" already declared \n";
         exit(0);
         }
         if(locsym->type_list.size()==1 && type == "void"){cout<<"ERROR in line  "<<line_num<<" : variable or field "<<locsym->name<<" declared void"<<endl;exit(0);}
         
         local_sym_tab->sym.push_back(*locsym);
         
         
         }
        break;

    }
}
catch (std::exception const &exc)
{
    exceptionHandler__(exc);
}

inline void ParserBase::reduce__(PI__ const &pi)
{
    d_token__ = pi.d_nonTerm;
    pop__(pi.d_size);

}

// If d_token__ is _UNDETERMINED_ then if d_nextToken__ is _UNDETERMINED_ another
// token is obtained from lex(). Then d_nextToken__ is assigned to d_token__.
void Parser::nextToken()
{
    if (d_token__ != _UNDETERMINED_)        // no need for a token: got one
        return;                             // already

    if (d_nextToken__ != _UNDETERMINED_)
    {
        popToken__();                       // consume pending token
    }
    else
    {
        ++d_acceptedTokens__;               // accept another token (see
                                            // errorRecover())
        d_token__ = lex();
        if (d_token__ <= 0)
            d_token__ = _EOF_;
    }
    print();
}

// if the final transition is negative, then we should reduce by the rule
// given by its positive value. Note that the `recovery' parameter is only
// used with the --debug option
int Parser::lookup(bool recovery)
{
    // $insert threading
    SR__ *sr = s_state[d_state__];        // get the appropriate state-table
    int lastIdx = sr->d_lastIdx;        // sentinel-index in the SR__ array

    SR__ *lastElementPtr = sr + lastIdx;
    SR__ *elementPtr = sr + 1;            // start the search at s_xx[1]

    lastElementPtr->d_token = d_token__;// set search-token

    while (elementPtr->d_token != d_token__)
        ++elementPtr;

    if (elementPtr == lastElementPtr)   // reached the last element
    {
        if (elementPtr->d_action < 0)   // default reduction
        {
            return elementPtr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = elementPtr->d_action;


    return action;
}

    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)
void Parser::errorRecovery()
try
{
    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error("Syntax error");                  // simply skip input

    }


    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        pop__();
    }

    // In the error state, lookup a token allowing us to proceed.
    // Continuation may be possible following multiple reductions,
    // but eventuall a shift will be used, requiring the retrieval of
    // a terminal token. If a retrieved token doesn't match, the catch below 
    // will ensure the next token is requested in the while(true) block
    // implemented below:

    int lastToken = d_token__;                  // give the unexpected token a
                                                // chance to be processed
                                                // again.

    pushToken__(_error_);                       // specify _error_ as next token
    push__(lookup(true));                       // push the error state

    d_token__ = lastToken;                      // reactivate the unexpected
                                                // token (we're now in an
                                                // ERROR state).

    bool gotToken = true;                       // the next token is a terminal

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
            {
                gotToken = d_token__ == _UNDETERMINED_;
                nextToken();                    // obtain next token
            }
            
            int action = lookup(true);

            if (action > 0)                 // push a new state
            {
                push__(action);
                popToken__();

                if (gotToken)
                {

                    d_acceptedTokens__ = 0;
                    return;
                }
            }
            else if (action < 0)
            {
                // no actions executed on recovery but save an already 
                // available token:
                if (d_token__ != _UNDETERMINED_)
                    pushToken__(d_token__);
 
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else
                ABORT();                    // abort when accepting during
                                            // error recovery
        }
        catch (...)
        {
            if (d_token__ == _EOF_)
                ABORT();                    // saw inappropriate _EOF_
                      
            popToken__();                   // failing token now skipped
        }
    }
}
catch (ErrorRecovery__)       // This is: DEFAULT_RECOVERY_MODE
{
    ABORT();
}

    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and d_token__ as well as
    // d_nextToken__ are initialized to _UNDETERMINED_. 
    //
    // Then, in an eternal loop:
    //
    //  1. If a state does not have REQ_TOKEN no token is assigned to
    //     d_token__. If the state has REQ_TOKEN, nextToken() is called to
    //      determine d_nextToken__ and d_token__ is set to
    //     d_nextToken__. nextToken() will not call lex() unless d_nextToken__ is 
    //     _UNDETERMINED_. 
    //
    //  2. lookup() is called: 
    //     d_token__ is stored in the final element's d_token field of the
    //     state's SR_ array. 
    //
    //  3. The current token is looked up in the state's SR_ array
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token__ is not found, and the state has no
    //     default reduction. Error handling was described at the top of this
    //     file.

int Parser::parse()
try 
{
    push__(0);                              // initial state
    clearin();                              // clear the tokens.

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
                nextToken();                // obtain next token


            int action = lookup(false);     // lookup d_token__ in d_state__

            if (action > 0)                 // SHIFT: push a new state
            {
                push__(action);
                popToken__();               // token processed
            }
            else if (action < 0)            // REDUCE: execute and pop.
            {
                executeAction(-action);
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else 
                ACCEPT();
        }
        catch (ErrorRecovery__)
        {
            errorRecovery();
        }
    }
}
catch (Return__ retValue)
{
    return retValue;
}

// $insert polymorphicImpl
namespace Meta__
{
   Base::~Base()
   {}
}




